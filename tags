!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
--out-implib	mongoose/Makefile	/^		-shared -Wl,--out-implib=$(PROG).lib -o _$(PROG).dll$/;"	m
ACCESS_CONTROL_LIST	src/lib/mongoose.c	/^  ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST, MAX_REQUEST_SIZE,$/;"	e	enum:__anon3	file:
ACCESS_LOG_FILE	src/lib/mongoose.c	/^  PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon3	file:
ACTION_STR_SZ	include/protocol.h	25;"	d
ARRAY_SIZE	src/lib/mongoose.c	208;"	d	file:
ASSERT	include/debug.h	11;"	d
AUTHENTICATION_DOMAIN	src/lib/mongoose.c	/^  PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon3	file:
BUFSIZ	src/lib/mongoose.c	63;"	d	file:
CFLAGS	Makefile	/^CFLAGS= -Iinclude -Wall -std=c99 $/;"	m
CFLAGS	mongoose/Makefile	/^CFLAGS=		-W -Wall -std=c99 -pedantic -O2 -fomit-frame-pointer $(COPT)$/;"	m
CFLAGS	mongoose/examples/Makefile	/^CFLAGS=	-W -Wall -I.. -pthread -g$/;"	m
CGI_ENVIRONMENT	src/lib/mongoose.c	/^  CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon3	file:
CGI_ENVIRONMENT_SIZE	src/lib/mongoose.c	206;"	d	file:
CGI_EXTENSIONS	src/lib/mongoose.c	/^  CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon3	file:
CGI_INTERPRETER	src/lib/mongoose.c	/^  CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon3	file:
CL	mongoose/Makefile	/^CL=	cl \/MD \/TC \/nologo $(DBG) \/Gz \/W3 \/DNO_SSL_DL$/;"	m
CONFIG_FILE	mongoose/main.c	64;"	d	file:
CRYPTO_LIB	src/lib/mongoose.c	181;"	d	file:
CRYPTO_LIB	src/lib/mongoose.c	184;"	d	file:
CRYPTO_LIB	src/lib/mongoose.c	94;"	d	file:
CRYPTO_LOCK	src/lib/mongoose.c	244;"	d	file:
CRYPTO_num_locks	src/lib/mongoose.c	/^extern int CRYPTO_num_locks(void);$/;"	p	file:	signature:(void)
CRYPTO_num_locks	src/lib/mongoose.c	298;"	d	file:
CRYPTO_set_id_callback	src/lib/mongoose.c	/^extern void CRYPTO_set_id_callback(unsigned long (*)(void));$/;"	p	file:	signature:(unsigned long (*)(void))
CRYPTO_set_id_callback	src/lib/mongoose.c	301;"	d	file:
CRYPTO_set_locking_callback	src/lib/mongoose.c	/^extern void CRYPTO_set_locking_callback(void (*)(int, int, const char *, int));$/;"	p	file:	signature:(void (*)(int, int, const char *, int))
CRYPTO_set_locking_callback	src/lib/mongoose.c	299;"	d	file:
CYA	mongoose/Makefile	/^CYA=	y:$/;"	m
CYAFL	mongoose/Makefile	/^CYAFL=	\/c \/I $(CYA)\\ctaocrypt\\include \/I $(CYA)\\include \/D_LIB$/;"	m
CYASRC	mongoose/Makefile	/^CYASRC= $(CYA)\/src\/cyassl_int.c \\$/;"	m
Connection	mongoose/bindings/python/mongoose.py	/^class Connection(object):$/;"	c	inherits:object
ControlHandler	mongoose/main.c	/^static void WINAPI ControlHandler(DWORD code) {$/;"	f	file:	signature:(DWORD code)
DBG	mongoose/Makefile	/^DBG=	\/DNDEBUG \/O1$/;"	m
DEBUG_H	include/debug.h	2;"	d
DEBUG_MARK	include/debug.h	19;"	d
DEBUG_TRACE	src/lib/mongoose.c	211;"	d	file:
DEBUG_TRACE	src/lib/mongoose.c	222;"	d	file:
DIR	src/lib/mongoose.c	/^typedef struct DIR {$/;"	s	file:
DIR	src/lib/mongoose.c	/^} DIR;$/;"	t	typeref:struct:DIR	file:
DIR::handle	src/lib/mongoose.c	/^  HANDLE   handle;$/;"	m	struct:DIR	file:	access:public
DIR::info	src/lib/mongoose.c	/^  WIN32_FIND_DATAW info;$/;"	m	struct:DIR	file:	access:public
DIR::result	src/lib/mongoose.c	/^  struct dirent  result;$/;"	m	struct:DIR	typeref:struct:DIR::dirent	file:	access:public
DIRSEP	mongoose/main.c	44;"	d	file:
DIRSEP	mongoose/main.c	52;"	d	file:
DIRSEP	src/lib/mongoose.c	186;"	d	file:
DIRSEP	src/lib/mongoose.c	95;"	d	file:
DOCUMENT_ROOT	src/lib/mongoose.c	/^  DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon3	file:
ENABLE_DIRECTORY_LISTING	src/lib/mongoose.c	/^  SSL_CHAIN_FILE, ENABLE_DIRECTORY_LISTING, ERROR_LOG_FILE,$/;"	e	enum:__anon3	file:
ENABLE_KEEP_ALIVE	src/lib/mongoose.c	/^  ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST, MAX_REQUEST_SIZE,$/;"	e	enum:__anon3	file:
ENTRIES_PER_CONFIG_OPTION	src/lib/mongoose.c	417;"	d	file:
EPOCH_DIFF	src/lib/mongoose.c	72;"	d	file:
ERRNO	src/lib/mongoose.c	194;"	d	file:
ERRNO	src/lib/mongoose.c	91;"	d	file:
ERROR_LOG_FILE	src/lib/mongoose.c	/^  SSL_CHAIN_FILE, ENABLE_DIRECTORY_LISTING, ERROR_LOG_FILE,$/;"	e	enum:__anon3	file:
ERR_error_string	src/lib/mongoose.c	/^extern char *ERR_error_string(unsigned long, char *);$/;"	p	file:	signature:(unsigned long, char *)
ERR_error_string	src/lib/mongoose.c	304;"	d	file:
ERR_get_error	src/lib/mongoose.c	/^extern unsigned long ERR_get_error(void);$/;"	p	file:	signature:(void)
ERR_get_error	src/lib/mongoose.c	303;"	d	file:
EVENT_H	include/event.h	2;"	d
EVENT_LOG	mongoose/bindings/python/mongoose.py	/^EVENT_LOG = 2$/;"	v
EWOULDBLOCK	src/lib/mongoose.c	99;"	d	file:
EXE	Makefile	/^EXE= pushup$/;"	m
EXTRA_MIME_TYPES	src/lib/mongoose.c	/^  EXTRA_MIME_TYPES, LISTENING_PORTS,$/;"	e	enum:__anon3	file:
EventHandler	mongoose/bindings/python/example.py	/^def EventHandler(event, conn, info):$/;"	f	access:public
F	mongoose/Makefile	/^	F=mongoose-`perl -lne '\/define\\s+MONGOOSE_VERSION\\s+"(\\S+)"\/ and print $$1' mongoose.c`.tgz ; cd .. && tar --exclude \\*.hg --exclude \\*.svn --exclude \\*.swp --exclude \\*.nfs\\* --exclude win32 -czf x mongoose && mv x mongoose\/$$F$/;"	m
F1	src/lib/mongoose.c	1773;"	d	file:
F2	src/lib/mongoose.c	1774;"	d	file:
F3	src/lib/mongoose.c	1775;"	d	file:
F4	src/lib/mongoose.c	1776;"	d	file:
FALSE	include/types.h	7;"	d
GLOBAL_PASSWORDS_FILE	src/lib/mongoose.c	/^  GLOBAL_PASSWORDS_FILE, INDEX_FILES,$/;"	e	enum:__anon3	file:
GUILIB	mongoose/Makefile	/^GUILIB=	user32.lib shell32.lib$/;"	m
HASH_BUCKETS	include/lib/hash.h	29;"	d
HASH_ELEM_INITIALIZER	include/lib/hash.h	47;"	d
HASH_ELEM_TO_LIST_ELEM	include/lib/hash.h	40;"	d
HASH_ENTRY	include/lib/hash.h	37;"	d
HEXTOI	src/lib/mongoose.c	1391;"	d	file:
HTTP_ERROR	mongoose/bindings/python/mongoose.py	/^HTTP_ERROR = 1$/;"	v
ID_EDIT_CONFIG	mongoose/main.c	304;"	d	file:
ID_ICON	mongoose/main.c	308;"	d	file:
ID_INSTALL_SERVICE	mongoose/main.c	306;"	d	file:
ID_QUIT	mongoose/main.c	303;"	d	file:
ID_REMOVE_SERVICE	mongoose/main.c	307;"	d	file:
ID_SEPARATOR	mongoose/main.c	305;"	d	file:
ID_TRAYICON	mongoose/main.c	302;"	d	file:
INDEX_FILES	src/lib/mongoose.c	/^  GLOBAL_PASSWORDS_FILE, INDEX_FILES,$/;"	e	enum:__anon3	file:
INIT_SSL	mongoose/bindings/python/mongoose.py	/^INIT_SSL = 3$/;"	v
INT64_FMT	src/lib/mongoose.c	102;"	d	file:
INT64_FMT	src/lib/mongoose.c	196;"	d	file:
INT64_MAX	src/lib/mongoose.c	148;"	d	file:
INVALID_SOCKET	src/lib/mongoose.c	195;"	d	file:
IS_DIRSEP_CHAR	src/lib/mongoose.c	187;"	d	file:
IS_DIRSEP_CHAR	src/lib/mongoose.c	96;"	d	file:
J	mongoose/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
LDFLAGS	Makefile	/^LDFLAGS= -pthread -ldl$/;"	m
LIB	mongoose/Makefile	/^LIB=		_$(PROG).so$/;"	m
LIB_KERNEL_HASH_H	include/lib/hash.h	22;"	d
LINFLAGS	mongoose/Makefile	/^LINFLAGS=	-ldl -pthread $(CFLAGS)$/;"	m
LINK	mongoose/Makefile	/^LINK=	\/link \/incremental:no \/libpath:$(VC)\\lib \/subsystem:windows \\$/;"	m
LISTENING_PORT	mongoose/test/embed.c	34;"	d	file:
LISTENING_PORTS	src/lib/mongoose.c	/^  EXTRA_MIME_TYPES, LISTENING_PORTS,$/;"	e	enum:__anon3	file:
LIST_ELEM_INITIALIZER	include/lib/list.h	26;"	d
LIST_ELEM_TO_HASH_ELEM	include/lib/hash.h	44;"	d
LIST_ENTRY	include/lib/list.h	22;"	d
LIST_H	include/lib/list.h	2;"	d
MAC_SHARED	mongoose/Makefile	/^MAC_SHARED=	-flat_namespace -bundle -undefined suppress$/;"	m
MAINSRC	Makefile	/^MAINSRC= $(SOURCES) $(SRCFOLDER)main.o$/;"	m
MAKEUQUAD	src/lib/mongoose.c	69;"	d	file:
MAX_CGI_ENVIR_VARS	src/lib/mongoose.c	207;"	d	file:
MAX_MESSAGES	mongoose/examples/chat.c	25;"	d	file:
MAX_MESSAGE_LEN	mongoose/examples/chat.c	24;"	d	file:
MAX_OPTIONS	mongoose/main.c	56;"	d	file:
MAX_REQUEST_SIZE	src/lib/mongoose.c	/^  ENABLE_KEEP_ALIVE, ACCESS_CONTROL_LIST, MAX_REQUEST_SIZE,$/;"	e	enum:__anon3	file:
MAX_SESSIONS	mongoose/examples/chat.c	26;"	d	file:
MAX_USER_LEN	mongoose/examples/chat.c	23;"	d	file:
MD5Context	src/lib/mongoose.c	/^typedef struct MD5Context {$/;"	s	file:
MD5Context::bits	src/lib/mongoose.c	/^  uint32_t bits[2];$/;"	m	struct:MD5Context	file:	access:public
MD5Context::buf	src/lib/mongoose.c	/^  uint32_t buf[4];$/;"	m	struct:MD5Context	file:	access:public
MD5Context::in	src/lib/mongoose.c	/^  unsigned char in[64];$/;"	m	struct:MD5Context	file:	access:public
MD5Final	src/lib/mongoose.c	/^static void MD5Final(unsigned char digest[16], MD5_CTX *ctx) {$/;"	f	file:	signature:(unsigned char digest[16], MD5_CTX *ctx)
MD5Init	src/lib/mongoose.c	/^static void MD5Init(MD5_CTX *ctx) {$/;"	f	file:	signature:(MD5_CTX *ctx)
MD5STEP	src/lib/mongoose.c	1778;"	d	file:
MD5Transform	src/lib/mongoose.c	/^static void MD5Transform(uint32_t buf[4], uint32_t const in[16]) {$/;"	f	file:	signature:(uint32_t buf[4], uint32_t const in[16])
MD5Update	src/lib/mongoose.c	/^static void MD5Update(MD5_CTX *ctx, unsigned char const *buf, unsigned len) {$/;"	f	file:	signature:(MD5_CTX *ctx, unsigned char const *buf, unsigned len)
MD5_CTX	src/lib/mongoose.c	/^} MD5_CTX;$/;"	t	typeref:struct:MD5Context	file:
MESSAGE_STR_SZ	include/protocol.h	28;"	d
MG_EVENT_LOG	include/lib/mongoose.h	/^  MG_EVENT_LOG,     \/\/ Mongoose logs an event, request_info.log_message$/;"	e	enum:mg_event
MG_HTTP_ERROR	include/lib/mongoose.h	/^  MG_HTTP_ERROR,    \/\/ HTTP error must be returned to the client$/;"	e	enum:mg_event
MG_INIT_SSL	include/lib/mongoose.h	/^  MG_INIT_SSL,      \/\/ Mongoose initializes SSL. Instead of mg_connection *,$/;"	e	enum:mg_event
MG_NEW_REQUEST	include/lib/mongoose.h	/^  MG_NEW_REQUEST,   \/\/ New HTTP request has arrived from the client$/;"	e	enum:mg_event
MINGWDBG	mongoose/Makefile	/^MINGWDBG= -DNDEBUG -Os$/;"	m
MINGWOPT	mongoose/Makefile	/^MINGWOPT= -W -Wall -mthreads -Wl,--subsystem,windows $(MINGWDBG)$/;"	m
MONGOOSE_HEADER_INCLUDED	include/lib/mongoose.h	22;"	d
MONGOOSE_VERSION	src/lib/mongoose.c	204;"	d	file:
Main	mongoose/bindings/csharp/example.cs	/^	static void Main() {$/;"	m	class:Program	file:	access:private	signature:()
Mongoose	mongoose/bindings/csharp/mongoose.cs	/^	public Mongoose() {$/;"	m	class:Mongoose	access:public	signature:()
Mongoose	mongoose/bindings/csharp/mongoose.cs	/^public class Mongoose {$/;"	c
Mongoose	mongoose/bindings/python/mongoose.py	/^class Mongoose(object):$/;"	c	inherits:object
Mongoose.Mongoose	mongoose/bindings/csharp/mongoose.cs	/^	public Mongoose() {$/;"	m	class:Mongoose	access:public	signature:()
Mongoose.ctx	mongoose/bindings/csharp/mongoose.cs	/^	private IntPtr ctx;$/;"	f	class:Mongoose	file:	access:private
Mongoose.delegates1	mongoose/bindings/csharp/mongoose.cs	/^    	private event MongooseCallback delegates1;$/;"	E	class:Mongoose	file:	access:private
Mongoose.delegates2	mongoose/bindings/csharp/mongoose.cs	/^    	private event MongooseCallback2 delegates2;$/;"	E	class:Mongoose	file:	access:private
Mongoose.get_option	mongoose/bindings/csharp/mongoose.cs	/^	public string get_option(string option_name) {$/;"	m	class:Mongoose	access:public	signature:(string option_name)
Mongoose.mg_get_option	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_option(IntPtr ctx, string name);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, string name)
Mongoose.mg_set_log_callback	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_set_log_callback(IntPtr ctx, MulticastDelegate func);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, MulticastDelegate func)
Mongoose.mg_set_option	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern int	mg_set_option(IntPtr ctx, string name, string value);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, string name, string value)
Mongoose.mg_set_uri_callback	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_set_uri_callback(IntPtr ctx, string uri_regex, MulticastDelegate func, IntPtr data);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, string uri_regex, MulticastDelegate func, IntPtr data)
Mongoose.mg_start	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern IntPtr	mg_start();$/;"	m	class:Mongoose	file:	access:private	signature:()
Mongoose.mg_stop	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_stop(IntPtr ctx);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx)
Mongoose.mg_version	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_version();$/;"	m	class:Mongoose	file:	access:private	signature:()
Mongoose.set_log_callback	mongoose/bindings/csharp/mongoose.cs	/^	public void set_log_callback(MongooseCallback func) {$/;"	m	class:Mongoose	access:public	signature:(MongooseCallback func)
Mongoose.set_option	mongoose/bindings/csharp/mongoose.cs	/^	public int set_option(string option_name, string option_value) {$/;"	m	class:Mongoose	access:public	signature:(string option_name, string option_value)
Mongoose.set_uri_callback	mongoose/bindings/csharp/mongoose.cs	/^	public void set_uri_callback(string uri_regex, MongooseCallback func) {$/;"	m	class:Mongoose	access:public	signature:(string uri_regex, MongooseCallback func)
Mongoose.version	mongoose/bindings/csharp/mongoose.cs	/^	public string version;$/;"	f	class:Mongoose	access:public
Mongoose.~Mongoose	mongoose/bindings/csharp/mongoose.cs	/^	~Mongoose() {$/;"	m	class:Mongoose	file:	access:private	signature:()
MongooseCallback	mongoose/bindings/csharp/mongoose.cs	/^public delegate void MongooseCallback(MongooseConnection conn, MongooseRequestInfo ri);$/;"	m	signature:(MongooseConnection conn, MongooseRequestInfo ri)
MongooseCallback2	mongoose/bindings/csharp/mongoose.cs	/^public delegate void MongooseCallback2(IntPtr conn, ref MongooseRequestInfo ri, IntPtr user_data);$/;"	m	signature:(IntPtr conn, ref MongooseRequestInfo ri, IntPtr user_data)
MongooseConnection	mongoose/bindings/csharp/mongoose.cs	/^	public MongooseConnection(IntPtr conn_, Mongoose mongoose_) {$/;"	m	class:MongooseConnection	access:public	signature:(IntPtr conn_, Mongoose mongoose_)
MongooseConnection	mongoose/bindings/csharp/mongoose.cs	/^public class MongooseConnection {$/;"	c
MongooseConnection.MongooseConnection	mongoose/bindings/csharp/mongoose.cs	/^	public MongooseConnection(IntPtr conn_, Mongoose mongoose_) {$/;"	m	class:MongooseConnection	access:public	signature:(IntPtr conn_, Mongoose mongoose_)
MongooseConnection.conn	mongoose/bindings/csharp/mongoose.cs	/^	private IntPtr conn;$/;"	f	class:MongooseConnection	file:	access:private
MongooseConnection.get_header	mongoose/bindings/csharp/mongoose.cs	/^	public string get_header(string header_name) {$/;"	m	class:MongooseConnection	access:public	signature:(string header_name)
MongooseConnection.get_var	mongoose/bindings/csharp/mongoose.cs	/^	public string get_var(string header_name) {$/;"	m	class:MongooseConnection	access:public	signature:(string header_name)
MongooseConnection.mg_free	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_free(IntPtr ptr);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr ptr)
MongooseConnection.mg_get_header	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_header(IntPtr ctx, string name);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr ctx, string name)
MongooseConnection.mg_get_var	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_var(IntPtr ctx, string name);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr ctx, string name)
MongooseConnection.mg_write	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] public static extern int	mg_write(IntPtr conn, string data, int length);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr conn, string data, int length)
MongooseConnection.mongoose	mongoose/bindings/csharp/mongoose.cs	/^	public Mongoose	mongoose;$/;"	f	class:MongooseConnection	access:public
MongooseConnection.write	mongoose/bindings/csharp/mongoose.cs	/^	public int write(string data) {$/;"	m	class:MongooseConnection	access:public	signature:(string data)
MongooseHeader	mongoose/bindings/csharp/mongoose.cs	/^[StructLayout(LayoutKind.Sequential)] public struct MongooseHeader {$/;"	s
MongooseHeader.name	mongoose/bindings/csharp/mongoose.cs	/^	public IntPtr	name;		\/\/ Using IntPtr here because if we use strings here,$/;"	f	struct:MongooseHeader	access:public
MongooseHeader.value	mongoose/bindings/csharp/mongoose.cs	/^	public IntPtr	value;		\/\/ it won't be properly marshalled.$/;"	f	struct:MongooseHeader	access:public
MongooseRequestInfo	mongoose/bindings/csharp/mongoose.cs	/^[StructLayout(LayoutKind.Sequential)] public struct MongooseRequestInfo {$/;"	s
MongooseRequestInfo.http_headers	mongoose/bindings/csharp/mongoose.cs	/^	[MarshalAs(UnmanagedType.ByValArray,SizeConst=64)] public MongooseHeader[] http_headers;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.http_version	mongoose/bindings/csharp/mongoose.cs	/^	public string	http_version;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.num_headers	mongoose/bindings/csharp/mongoose.cs	/^	public int	num_headers;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.post_data	mongoose/bindings/csharp/mongoose.cs	/^	public IntPtr	post_data;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.post_data_len	mongoose/bindings/csharp/mongoose.cs	/^	public int	post_data_len;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.query_string	mongoose/bindings/csharp/mongoose.cs	/^	public string	query_string;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.remote_ip	mongoose/bindings/csharp/mongoose.cs	/^	public int	remote_ip; \/\/int to match the 32bit declaration in c$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.remote_port	mongoose/bindings/csharp/mongoose.cs	/^	public int	remote_port;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.remote_user	mongoose/bindings/csharp/mongoose.cs	/^	public string	remote_user;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.request_method	mongoose/bindings/csharp/mongoose.cs	/^	public string	request_method;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.status_code	mongoose/bindings/csharp/mongoose.cs	/^	public int	status_code;$/;"	f	struct:MongooseRequestInfo	access:public
MongooseRequestInfo.uri	mongoose/bindings/csharp/mongoose.cs	/^	public string	uri;$/;"	f	struct:MongooseRequestInfo	access:public
NEW_REQUEST	mongoose/bindings/python/mongoose.py	/^NEW_REQUEST = 0$/;"	v
NO_CGI	src/lib/mongoose.c	60;"	d	file:
NO_SOCKLEN_T	src/lib/mongoose.c	92;"	d	file:
NUM_OPTIONS	src/lib/mongoose.c	/^  NUM_OPTIONS$/;"	e	enum:__anon3	file:
NUM_THREADS	src/lib/mongoose.c	/^  DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon3	file:
O_BINARY	src/lib/mongoose.c	188;"	d	file:
O_NONBLOCK	src/lib/mongoose.c	97;"	d	file:
PANIC	include/debug.h	22;"	d
PASSWORDS_FILE_NAME	src/lib/mongoose.c	205;"	d	file:
PATH_MAX	mongoose/main.c	42;"	d	file:
PATH_MAX	src/lib/mongoose.c	51;"	d	file:
PROG	mongoose/Makefile	/^PROG=	mongoose$/;"	m
PROG	mongoose/examples/Makefile	/^PROG=	chat$/;"	m
PROTECT_URI	src/lib/mongoose.c	/^  PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon3	file:
PROTOCOL_H	include/protocol.h	2;"	d
PROTO_ACTION	include/protocol.h	17;"	d
PROTO_MESSAGE	include/protocol.h	20;"	d
PROTO_SESSION	include/protocol.h	19;"	d
PROTO_USER	include/protocol.h	18;"	d
PR_DEFAULT	include/protocol.h	/^    , PR_DEFAULT\/\/ default (error) type$/;"	e	enum:reqtype
PR_PUSH	include/protocol.h	/^      PR_PUSH   \/\/ pushing an event to the server$/;"	e	enum:reqtype
PR_REG	include/protocol.h	/^    , PR_REG    \/\/ register (login) a user with a session$/;"	e	enum:reqtype
PR_UPDATE	include/protocol.h	/^    , PR_UPDATE \/\/ requesting an update for events in the queue$/;"	e	enum:reqtype
PR_UREG	include/protocol.h	/^    , PR_UREG   \/\/ unregister (logout) a user with a session$/;"	e	enum:reqtype
PUT_DELETE_PASSWORDS_FILE	src/lib/mongoose.c	/^  CGI_EXTENSIONS, CGI_ENVIRONMENT, PUT_DELETE_PASSWORDS_FILE, CGI_INTERPRETER,$/;"	e	enum:__anon3	file:
Program	mongoose/bindings/csharp/example.cs	/^public class Program {$/;"	c
Program.Main	mongoose/bindings/csharp/example.cs	/^	static void Main() {$/;"	m	class:Program	file:	access:private	signature:()
Program.UriDumpInfo	mongoose/bindings/csharp/example.cs	/^    static private void UriDumpInfo(MongooseConnection conn, MongooseRequestInfo ri)$/;"	m	class:Program	file:	access:private	signature:(MongooseConnection conn, MongooseRequestInfo ri)
Program.UriHandler	mongoose/bindings/csharp/example.cs	/^	static private void UriHandler(MongooseConnection conn, MongooseRequestInfo ri) {$/;"	m	class:Program	file:	access:private	signature:(MongooseConnection conn, MongooseRequestInfo ri)
Qa	mongoose/examples/html/jquery.js	/^(function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll("left")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b==="object"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o<i;o++)e(a[o],b,f?d.call(a[o],o,e(a[o],b)):d,j);return a}return i?$/;"	f
RATE_DIFF	src/lib/mongoose.c	71;"	d	file:
RTLD_LAZY	src/lib/mongoose.c	115;"	d	file:
RUN_AS_USER	src/lib/mongoose.c	/^  DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon3	file:
SESSION_H	include/session.h	2;"	d
SESSION_STR_SZ	include/protocol.h	27;"	d
SESSION_TTL	mongoose/examples/chat.c	27;"	d	file:
SHUT_WR	src/lib/mongoose.c	105;"	d	file:
SIGKILL	src/lib/mongoose.c	1090;"	d	file:
SOCKET	src/lib/mongoose.c	/^typedef int SOCKET;$/;"	t	file:
SOURCES	Makefile	/^SOURCES= $(SRCFOLDER)lib\/mongoose.o \\$/;"	m
SRCFOLDER	Makefile	/^SRCFOLDER= src\/$/;"	m
SSI_EXTENSIONS	src/lib/mongoose.c	/^  PROTECT_URI, AUTHENTICATION_DOMAIN, SSI_EXTENSIONS, ACCESS_LOG_FILE,$/;"	e	enum:__anon3	file:
SSL	src/lib/mongoose.c	/^typedef struct ssl_st SSL;$/;"	t	typeref:struct:ssl_st	file:
SSL_CERTIFICATE	src/lib/mongoose.c	/^  DOCUMENT_ROOT, SSL_CERTIFICATE, NUM_THREADS, RUN_AS_USER,$/;"	e	enum:__anon3	file:
SSL_CHAIN_FILE	src/lib/mongoose.c	/^  SSL_CHAIN_FILE, ENABLE_DIRECTORY_LISTING, ERROR_LOG_FILE,$/;"	e	enum:__anon3	file:
SSL_CTX	src/lib/mongoose.c	/^typedef struct ssl_ctx_st SSL_CTX;$/;"	t	typeref:struct:ssl_ctx_st	file:
SSL_CTX_free	src/lib/mongoose.c	/^extern void SSL_CTX_free(SSL_CTX *);$/;"	p	file:	signature:(SSL_CTX *)
SSL_CTX_free	src/lib/mongoose.c	293;"	d	file:
SSL_CTX_new	src/lib/mongoose.c	/^extern SSL_CTX *SSL_CTX_new(SSL_METHOD *);$/;"	p	file:	signature:(SSL_METHOD *)
SSL_CTX_new	src/lib/mongoose.c	284;"	d	file:
SSL_CTX_set_default_passwd_cb	src/lib/mongoose.c	/^extern void SSL_CTX_set_default_passwd_cb(SSL_CTX *, mg_callback_t);$/;"	p	file:	signature:(SSL_CTX *, mg_callback_t)
SSL_CTX_set_default_passwd_cb	src/lib/mongoose.c	291;"	d	file:
SSL_CTX_use_PrivateKey_file	src/lib/mongoose.c	/^extern int SSL_CTX_use_PrivateKey_file(SSL_CTX *, const char *, int);$/;"	p	file:	signature:(SSL_CTX *, const char *, int)
SSL_CTX_use_PrivateKey_file	src/lib/mongoose.c	287;"	d	file:
SSL_CTX_use_certificate_chain_file	src/lib/mongoose.c	/^extern int SSL_CTX_use_certificate_chain_file(SSL_CTX *, const char *);$/;"	p	file:	signature:(SSL_CTX *, const char *)
SSL_CTX_use_certificate_chain_file	src/lib/mongoose.c	295;"	d	file:
SSL_CTX_use_certificate_file	src/lib/mongoose.c	/^extern int SSL_CTX_use_certificate_file(SSL_CTX *, const char *, int);$/;"	p	file:	signature:(SSL_CTX *, const char *, int)
SSL_CTX_use_certificate_file	src/lib/mongoose.c	289;"	d	file:
SSL_ERROR_WANT_READ	src/lib/mongoose.c	241;"	d	file:
SSL_ERROR_WANT_WRITE	src/lib/mongoose.c	242;"	d	file:
SSL_FILETYPE_PEM	src/lib/mongoose.c	243;"	d	file:
SSL_LIB	src/lib/mongoose.c	180;"	d	file:
SSL_LIB	src/lib/mongoose.c	183;"	d	file:
SSL_LIB	src/lib/mongoose.c	93;"	d	file:
SSL_METHOD	src/lib/mongoose.c	/^typedef struct ssl_method_st SSL_METHOD;$/;"	t	typeref:struct:ssl_method_st	file:
SSL_accept	src/lib/mongoose.c	/^extern int SSL_accept(SSL *);$/;"	p	file:	signature:(SSL *)
SSL_accept	src/lib/mongoose.c	277;"	d	file:
SSL_connect	src/lib/mongoose.c	/^extern int SSL_connect(SSL *);$/;"	p	file:	signature:(SSL *)
SSL_connect	src/lib/mongoose.c	278;"	d	file:
SSL_free	src/lib/mongoose.c	/^extern void SSL_free(SSL *);$/;"	p	file:	signature:(SSL *)
SSL_free	src/lib/mongoose.c	276;"	d	file:
SSL_get_error	src/lib/mongoose.c	/^extern int SSL_get_error(const SSL *, int);$/;"	p	file:	signature:(const SSL *, int)
SSL_get_error	src/lib/mongoose.c	281;"	d	file:
SSL_library_init	src/lib/mongoose.c	/^extern int SSL_library_init(void);$/;"	p	file:	signature:(void)
SSL_library_init	src/lib/mongoose.c	286;"	d	file:
SSL_load_error_strings	src/lib/mongoose.c	/^extern void SSL_load_error_strings(void);$/;"	p	file:	signature:(void)
SSL_load_error_strings	src/lib/mongoose.c	294;"	d	file:
SSL_new	src/lib/mongoose.c	/^extern SSL *SSL_new(SSL_CTX *);$/;"	p	file:	signature:(SSL_CTX *)
SSL_new	src/lib/mongoose.c	283;"	d	file:
SSL_read	src/lib/mongoose.c	/^extern int SSL_read(SSL *, void *, int);$/;"	p	file:	signature:(SSL *, void *, int)
SSL_read	src/lib/mongoose.c	279;"	d	file:
SSL_set_fd	src/lib/mongoose.c	/^extern int SSL_set_fd(SSL *, int);$/;"	p	file:	signature:(SSL *, int)
SSL_set_fd	src/lib/mongoose.c	282;"	d	file:
SSL_write	src/lib/mongoose.c	/^extern int SSL_write(SSL *, const void *, int);$/;"	p	file:	signature:(SSL *, const void *, int)
SSL_write	src/lib/mongoose.c	280;"	d	file:
SSLv23_server_method	src/lib/mongoose.c	/^extern SSL_METHOD *SSLv23_server_method(void);$/;"	p	file:	signature:(void)
SSLv23_server_method	src/lib/mongoose.c	285;"	d	file:
STR	src/lib/mongoose.c	81;"	d	file:
STRX	src/lib/mongoose.c	80;"	d	file:
SYS2UNIX_TIME	src/lib/mongoose.c	73;"	d	file:
S_ISDIR	mongoose/main.c	43;"	d	file:
ServiceMain	mongoose/main.c	/^static void WINAPI ServiceMain(void) {$/;"	f	file:	signature:(void)
TRUE	include/types.h	6;"	d
TYPE_H	include/type.h	2;"	d
TrayIcon	mongoose/main.c	/^static NOTIFYICONDATA TrayIcon;$/;"	v	file:
USER_H	include/user.h	2;"	d
USER_STR_SZ	include/protocol.h	26;"	d
UriDumpInfo	mongoose/bindings/csharp/example.cs	/^    static private void UriDumpInfo(MongooseConnection conn, MongooseRequestInfo ri)$/;"	m	class:Program	file:	access:private	signature:(MongooseConnection conn, MongooseRequestInfo ri)
UriHandler	mongoose/bindings/csharp/example.cs	/^	static private void UriHandler(MongooseConnection conn, MongooseRequestInfo ri) {$/;"	m	class:Program	file:	access:private	signature:(MongooseConnection conn, MongooseRequestInfo ri)
VC	mongoose/Makefile	/^VC=	z:$/;"	m
WINCDECL	mongoose/main.c	48;"	d	file:
WINCDECL	mongoose/main.c	53;"	d	file:
WINCDECL	src/lib/mongoose.c	104;"	d	file:
WINCDECL	src/lib/mongoose.c	198;"	d	file:
WinMain	mongoose/main.c	/^int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR cmdline, int show) {$/;"	f	signature:(HINSTANCE hInst, HINSTANCE hPrev, LPSTR cmdline, int show)
WindowProc	mongoose/main.c	/^static LRESULT CALLBACK WindowProc(HWND hWnd, UINT msg, WPARAM wParam,$/;"	f	file:	signature:(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
X	mongoose/examples/html/jquery.js	/^(function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll("left")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b==="object"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o<i;o++)e(a[o],b,f?d.call(a[o],o,e(a[o],b)):d,j);return a}return i?$/;"	f
Y	mongoose/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
Z	mongoose/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
_CRT_SECURE_NO_WARNINGS	mongoose/main.c	22;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/lib/mongoose.c	22;"	d	file:
_LARGEFILE_SOURCE	src/lib/mongoose.c	25;"	d	file:
_POSIX_	src/lib/mongoose.c	101;"	d	file:
_WIN32_WINNT	src/lib/mongoose.c	47;"	d	file:
_XOPEN_SOURCE	mongoose/main.c	24;"	d	file:
_XOPEN_SOURCE	src/lib/mongoose.c	24;"	d	file:
__REQUEST_HANDLER_H	include/request_handler.h	2;"	d
__TYPES_H	include/types.h	2;"	d
__anon1::broadcast	src/lib/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	m	struct:__anon1	file:	access:public
__anon1::signal	src/lib/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	m	struct:__anon1	file:	access:public
__anon4::ext_len	src/lib/mongoose.c	/^  size_t ext_len;$/;"	m	struct:__anon4	file:	access:public
__anon4::extension	src/lib/mongoose.c	/^  const char *extension;$/;"	m	struct:__anon4	file:	access:public
__anon4::mime_type	src/lib/mongoose.c	/^  const char *mime_type;$/;"	m	struct:__anon4	file:	access:public
__anon4::mime_type_len	src/lib/mongoose.c	/^  size_t mime_type_len;$/;"	m	struct:__anon4	file:	access:public
__anon5::bdepth	src/event.c	/^    int bdepth;$/;"	m	struct:__anon5	file:	access:public
__anon5::save_ptr	src/event.c	/^    char* save_ptr;$/;"	m	struct:__anon5	file:	access:public
__anon6::name	include/session.h	/^      char name[33]   \/\/ Session names must be <33 characters long$/;"	m	struct:__anon6	access:public
__anon7::a	include/protocol.h	/^    char* a;    \/\/ action$/;"	m	struct:__anon7	access:public
__anon7::m	include/protocol.h	/^    char* m;    \/\/ message$/;"	m	struct:__anon7	access:public
__anon7::reqtype	include/protocol.h	/^    reqtype_t reqtype;$/;"	m	struct:__anon7	access:public
__anon7::s	include/protocol.h	/^    char* s;    \/\/ session$/;"	m	struct:__anon7	access:public
__anon7::u	include/protocol.h	/^    char* u;    \/\/ user$/;"	m	struct:__anon7	access:public
__anon8::message	include/event.h	/^    const char* message;$/;"	m	struct:__anon8	access:public
__anon8::reg_count	include/event.h	/^    int reg_count;  \/\/ Number of registered subscribers.  When this becomes$/;"	m	struct:__anon8	access:public
__anon8::reg_count_lock	include/event.h	/^    pthread_mutex_t reg_count_lock;$/;"	m	struct:__anon8	access:public
__anon8::sender	include/event.h	/^    user_t* sender; \/\/ Pointer to the user who broadcasted the event$/;"	m	struct:__anon8	access:public
__anon9::elem	include/user.h	/^    struct hash_elem elem;$/;"	m	struct:__anon9	typeref:struct:__anon9::hash_elem	access:public
__anon9::id	include/user.h	/^    char id[USER_STR_SZ + 1];$/;"	m	struct:__anon9	access:public
__del__	mongoose/bindings/python/mongoose.py	/^    def __del__(self):$/;"	m	class:Mongoose	file:	access:private
__func__	src/lib/mongoose.c	82;"	d	file:
__func__	src/lib/mongoose.c	86;"	d	file:
__init__	mongoose/bindings/python/mongoose.py	/^    def __init__(self, callback, **kwargs):$/;"	m	class:Mongoose	access:public
__init__	mongoose/bindings/python/mongoose.py	/^    def __init__(self, mongoose, connection):$/;"	m	class:Connection	access:public
_fields_	mongoose/bindings/python/mongoose.py	/^    _fields_ = [$/;"	v	class:mg_header
_fields_	mongoose/bindings/python/mongoose.py	/^    _fields_ = [$/;"	v	class:mg_request_info
a	include/protocol.h	/^    char* a;    \/\/ action$/;"	m	struct:__anon7	access:public
accept_new_connection	src/lib/mongoose.c	/^static void accept_new_connection(const struct socket *listener,$/;"	f	file:	signature:(const struct socket *listener, struct mg_context *ctx)
add_to_set	src/lib/mongoose.c	/^static void add_to_set(SOCKET fd, fd_set *set, int *max_fd) {$/;"	f	file:	signature:(SOCKET fd, fd_set *set, int *max_fd)
addenv	src/lib/mongoose.c	/^static char *addenv(struct cgi_env_block *block, const char *fmt, ...) {$/;"	f	file:	signature:(struct cgi_env_block *block, const char *fmt, ...)
ah	src/lib/mongoose.c	/^struct ah {$/;"	s	file:
ah::cnonce	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ah::nc	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ah::nonce	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ah::qop	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ah::response	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ah::uri	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ah::user	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
ajax_get_messages	mongoose/examples/chat.c	/^static void ajax_get_messages(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *request_info)
ajax_reply_start	mongoose/examples/chat.c	/^static const char *ajax_reply_start =$/;"	v	file:
ajax_send_message	mongoose/examples/chat.c	/^static void ajax_send_message(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *request_info)
authorize	mongoose/examples/chat.c	/^static void authorize(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *request_info)
authorize	src/lib/mongoose.c	/^static int authorize(struct mg_connection *conn, FILE *fp) {$/;"	f	file:	signature:(struct mg_connection *conn, FILE *fp)
authorize_url	mongoose/examples/chat.c	/^static const char *authorize_url = "\/authorize";$/;"	v	file:
aux	include/lib/hash.h	/^    void* aux;$/;"	m	struct:hash	access:public
aux	src/lib/hash.c	/^    void* aux;$/;"	m	struct:hash_find_data	file:	access:public
bdepth	src/event.c	/^    int bdepth;$/;"	m	struct:__anon5	file:	access:public
bin2str	src/lib/mongoose.c	/^static void bin2str(char *to, const unsigned char *p, size_t len) {$/;"	f	file:	signature:(char *to, const unsigned char *p, size_t len)
birth_time	src/lib/mongoose.c	/^  time_t birth_time;          \/\/ Time connection was accepted$/;"	m	struct:mg_connection	file:	access:public
bits	src/lib/mongoose.c	/^  uint32_t bits[2];$/;"	m	struct:MD5Context	file:	access:public
bool	include/type.h	/^typedef char bool;$/;"	t
broadcast	src/lib/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	m	struct:__anon1	file:	access:public
buckets	include/lib/hash.h	/^    struct list buckets[HASH_BUCKETS];$/;"	m	struct:hash	typeref:struct:hash::list	access:public
buf	src/lib/mongoose.c	/^  char *buf;                  \/\/ Buffer for received data$/;"	m	struct:mg_connection	file:	access:public
buf	src/lib/mongoose.c	/^  char buf[CGI_ENVIRONMENT_SIZE]; \/\/ Environment buffer$/;"	m	struct:cgi_env_block	file:	access:public
buf	src/lib/mongoose.c	/^  uint32_t buf[4];$/;"	m	struct:MD5Context	file:	access:public
buf_size	src/lib/mongoose.c	/^  int buf_size;               \/\/ Buffer size$/;"	m	struct:mg_connection	file:	access:public
builtin_mime_types	src/lib/mongoose.c	/^} builtin_mime_types[] = {$/;"	v	typeref:struct:__anon4	file:
byteReverse	src/lib/mongoose.c	/^static void byteReverse(unsigned char *buf, unsigned longs) {$/;"	f	file:	signature:(unsigned char *buf, unsigned longs)
byteReverse	src/lib/mongoose.c	1760;"	d	file:
c.fn.init	mongoose/examples/html/jquery.js	/^function(b,d){return a.call(b,d,b)}))},end:function(){return this.prevObject||c(null)},push:ba,sort:[].sort,splice:[].splice};c.fn.init.prototype=c.fn;c.extend=c.fn.extend=function(){var a=arguments[0]||{},b=1,d=arguments.length,f=false,e,j,i,o;if(typeof a==="boolean"){f=a;a=arguments[1]||{};b=2}if(typeof a!=="object"&&!c.isFunction(a))a={};if(d===b){a=this;--b}for(;b<d;b++)if((e=arguments[b])!=null)for(j in e){i=a[j];o=e[j];if(a!==o)if(f&&o&&(c.isPlainObject(o)||c.isArray(o))){i=i&&(c.isPlainObject(i)||$/;"	c
call_user	src/lib/mongoose.c	/^static void *call_user(struct mg_connection *conn, enum mg_event event) {$/;"	f	file:	signature:(struct mg_connection *conn, enum mg_event event)
callback	mongoose/test/embed.c	/^static void *callback(enum mg_event event,$/;"	f	file:	signature:(enum mg_event event, struct mg_connection *conn, const struct mg_request_info *request_info)
cgi_env_block	src/lib/mongoose.c	/^struct cgi_env_block {$/;"	s	file:
cgi_env_block::buf	src/lib/mongoose.c	/^  char buf[CGI_ENVIRONMENT_SIZE]; \/\/ Environment buffer$/;"	m	struct:cgi_env_block	file:	access:public
cgi_env_block::conn	src/lib/mongoose.c	/^  struct mg_connection *conn;$/;"	m	struct:cgi_env_block	typeref:struct:cgi_env_block::mg_connection	file:	access:public
cgi_env_block::len	src/lib/mongoose.c	/^  int len; \/\/ Space taken$/;"	m	struct:cgi_env_block	file:	access:public
cgi_env_block::nvars	src/lib/mongoose.c	/^  int nvars; \/\/ Number of variables$/;"	m	struct:cgi_env_block	file:	access:public
cgi_env_block::vars	src/lib/mongoose.c	/^  char *vars[MAX_CGI_ENVIR_VARS]; \/\/ char **envp$/;"	m	struct:cgi_env_block	file:	access:public
change_slashes_to_backslashes	src/lib/mongoose.c	/^static void change_slashes_to_backslashes(char *path) {$/;"	f	file:	signature:(char *path)
chat.backendUrl	mongoose/examples/html/main.js	/^var chat = {$/;"	p
chat.errorMessageFadeOutTimeoutMs	mongoose/examples/html/main.js	/^  maxVisibleMessages: 10,$/;"	p
chat.errorMessageFadeOutTimer	mongoose/examples/html/main.js	/^  errorMessageFadeOutTimeoutMs: 2000,$/;"	p
chat.getMessages	mongoose/examples/html/main.js	/^};$/;"	f
chat.getMessagesIntervalMs	mongoose/examples/html/main.js	/^  lastMessageId: 0,$/;"	p
chat.handleMenuItemClick	mongoose/examples/html/main.js	/^};$/;"	f
chat.handleMessageInput	mongoose/examples/html/main.js	/^};$/;"	f
chat.lastMessageId	mongoose/examples/html/main.js	/^  errorMessageFadeOutTimer: null,$/;"	p
chat.maxVisibleMessages	mongoose/examples/html/main.js	/^  backendUrl: '',$/;"	p
chat.normalizeText	mongoose/examples/html/main.js	/^};$/;"	f
chat.refresh	mongoose/examples/html/main.js	/^};$/;"	f
chat.showError	mongoose/examples/html/main.js	/^};$/;"	f
check_acl	src/lib/mongoose.c	/^static int check_acl(struct mg_context *ctx, const struct usa *usa) {$/;"	f	file:	signature:(struct mg_context *ctx, const struct usa *usa)
check_authorization	src/lib/mongoose.c	/^static int check_authorization(struct mg_connection *conn, const char *path) {$/;"	f	file:	signature:(struct mg_connection *conn, const char *path)
check_password	mongoose/examples/chat.c	/^static int check_password(const char *user, const char *password) {$/;"	f	file:	signature:(const char *user, const char *password)
check_password	src/lib/mongoose.c	/^static int check_password(const char *method, const char *ha1, const char *uri,$/;"	f	file:	signature:(const char *method, const char *ha1, const char *uri, const char *nonce, const char *nc, const char *cnonce, const char *qop, const char *response)
client	src/lib/mongoose.c	/^  struct socket client;       \/\/ Connected client$/;"	m	struct:mg_connection	typeref:struct:mg_connection::socket	file:	access:public
close	src/lib/mongoose.c	113;"	d	file:
close_all_listening_sockets	src/lib/mongoose.c	/^static void close_all_listening_sockets(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
close_connection	src/lib/mongoose.c	/^static void close_connection(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
close_socket_gracefully	src/lib/mongoose.c	/^static void close_socket_gracefully(SOCKET sock) {$/;"	f	file:	signature:(SOCKET sock)
closedir	src/lib/mongoose.c	/^static int closedir(DIR *dir) {$/;"	f	file:	signature:(DIR *dir)
closesocket	src/lib/mongoose.c	189;"	d	file:
cmp	src/lib/hash.c	/^    hash_compare_func* cmp;$/;"	m	struct:hash_find_data	file:	access:public
cmp_func	include/lib/hash.h	/^    hash_compare_func* cmp_func;$/;"	m	struct:hash	access:public
cnonce	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
compare_dir_entries	src/lib/mongoose.c	/^static int WINCDECL compare_dir_entries(const void *p1, const void *p2) {$/;"	f	file:	signature:(const void *p1, const void *p2)
cond	src/lib/mongoose.c	/^  pthread_cond_t  cond;      \/\/ Condvar for tracking workers terminations$/;"	m	struct:mg_context	file:	access:public
config	src/lib/mongoose.c	/^  char *config[NUM_OPTIONS];    \/\/ Mongoose configuration parameters$/;"	m	struct:mg_context	file:	access:public
config_file	mongoose/main.c	/^static char config_file[PATH_MAX];  \/\/ Set by process_command_line_arguments()$/;"	v	file:
config_options	src/lib/mongoose.c	/^static const char *config_options[] = {$/;"	v	file:
conn	mongoose/bindings/csharp/mongoose.cs	/^	private IntPtr conn;$/;"	f	class:MongooseConnection	file:	access:private
conn	src/lib/mongoose.c	/^  struct mg_connection *conn;$/;"	m	struct:cgi_env_block	typeref:struct:cgi_env_block::mg_connection	file:	access:public
conn	src/lib/mongoose.c	/^  struct mg_connection *conn;$/;"	m	struct:de	typeref:struct:de::mg_connection	file:	access:public
consume_socket	src/lib/mongoose.c	/^static int consume_socket(struct mg_context *ctx, struct socket *sp) {$/;"	f	file:	signature:(struct mg_context *ctx, struct socket *sp)
consumed_content	src/lib/mongoose.c	/^  int64_t consumed_content;   \/\/ How many bytes of content is already read$/;"	m	struct:mg_connection	file:	access:public
content_len	src/lib/mongoose.c	/^  int64_t content_len;        \/\/ Content-Length header value$/;"	m	struct:mg_connection	file:	access:public
context	src/main.c	/^static struct mg_context* context;$/;"	v	typeref:struct:mg_context	file:
convert_uri_to_file_name	src/lib/mongoose.c	/^static void convert_uri_to_file_name(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const char *uri, char *buf, size_t buf_len)
cry	src/lib/mongoose.c	/^static void cry(struct mg_connection *conn, const char *fmt, ...) {$/;"	f	file:	signature:(struct mg_connection *conn, const char *fmt, ...)
crypto_sw	src/lib/mongoose.c	/^static struct ssl_func crypto_sw[] = {$/;"	v	typeref:struct:ssl_func	file:
ctx	mongoose/bindings/csharp/mongoose.cs	/^	private IntPtr ctx;$/;"	f	class:Mongoose	file:	access:private
ctx	mongoose/main.c	/^static struct mg_context *ctx;      \/\/ Set by start_mongoose()$/;"	v	typeref:struct:mg_context	file:
ctx	src/lib/mongoose.c	/^  struct mg_context *ctx;$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_context	file:	access:public
ctypes	mongoose/bindings/python/mongoose.py	/^import ctypes$/;"	i
d_name	src/lib/mongoose.c	/^  char d_name[PATH_MAX];$/;"	m	struct:dirent	file:	access:public
data_len	src/lib/mongoose.c	/^  int data_len;               \/\/ Total size of data in a buffer$/;"	m	struct:mg_connection	file:	access:public
datestr	add_files.py	/^    datestr = now.strftime ("%Y-%m-%d %H:%M")$/;"	v
datetime	add_files.py	/^import datetime$/;"	i
de	src/lib/mongoose.c	/^struct de {$/;"	s	file:
de::conn	src/lib/mongoose.c	/^  struct mg_connection *conn;$/;"	m	struct:de	typeref:struct:de::mg_connection	file:	access:public
de::file_name	src/lib/mongoose.c	/^  char *file_name;$/;"	m	struct:de	file:	access:public
de::st	src/lib/mongoose.c	/^  struct mgstat st;$/;"	m	struct:de	typeref:struct:de::mgstat	file:	access:public
debug_backtrace	include/debug.h	/^void debug_backtrace (void);$/;"	p	signature:(void)
debug_backtrace	src/debug.c	/^debug_backtrace (void)$/;"	f	signature:(void)
delegates1	mongoose/bindings/csharp/mongoose.cs	/^    	private event MongooseCallback delegates1;$/;"	E	class:Mongoose	file:	access:private
delegates2	mongoose/bindings/csharp/mongoose.cs	/^    	private event MongooseCallback2 delegates2;$/;"	E	class:Mongoose	file:	access:private
die	mongoose/main.c	/^static void die(const char *fmt, ...) {$/;"	f	file:	signature:(const char *fmt, ...)
dirent	src/lib/mongoose.c	/^struct dirent {$/;"	s	file:
dirent::d_name	src/lib/mongoose.c	/^  char d_name[PATH_MAX];$/;"	m	struct:dirent	file:	access:public
discard_current_request_from_buffer	src/lib/mongoose.c	/^static void discard_current_request_from_buffer(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
dlopen	src/lib/mongoose.c	/^static HANDLE dlopen(const char *dll_name, int flags) {$/;"	f	file:	signature:(const char *dll_name, int flags)
dlsym	src/lib/mongoose.c	114;"	d	file:
do_PUT_test	mongoose/test/test.pl	/^sub do_PUT_test {$/;"	s
do_embedded_test	mongoose/test/test.pl	/^sub do_embedded_test {$/;"	s
do_ssi_exec	src/lib/mongoose.c	/^static void do_ssi_exec(struct mg_connection *conn, char *tag) {$/;"	f	file:	signature:(struct mg_connection *conn, char *tag)
do_ssi_include	src/lib/mongoose.c	/^static void do_ssi_include(struct mg_connection *conn, const char *ssi,$/;"	f	file:	signature:(struct mg_connection *conn, const char *ssi, char *tag, int include_level)
document_root	mongoose/bindings/python/example.py	/^                           document_root='\/tmp',$/;"	v
edit_config_file	mongoose/main.c	/^static void edit_config_file(void) {$/;"	f	file:	signature:(void)
elem	include/lib/hash.h	/^    struct list_elem elem;$/;"	m	struct:hash_elem	typeref:struct:hash_elem::list_elem	access:public
elem	include/user.h	/^    struct hash_elem elem;$/;"	m	struct:__anon9	typeref:struct:__anon9::hash_elem	access:public
errno	src/lib/mongoose.c	65;"	d	file:
event	mongoose/test/embed.c	/^  enum mg_event event;$/;"	m	struct:test_config	typeref:enum:test_config::mg_event	file:	access:public
event_func_table	src/main.c	/^static mg_event_func_t event_func_table[4];$/;"	v	file:
event_handler	mongoose/examples/chat.c	/^static void *event_handler(enum mg_event event,$/;"	f	file:	signature:(enum mg_event event, struct mg_connection *conn, const struct mg_request_info *request_info)
event_init	include/event.h	/^void event_init (event_t*, user_t*, const char*);$/;"	p	signature:(event_t*, user_t*, const char*)
event_init	src/event.c	/^event_init (event_t* e, user_t* user, const char* message)$/;"	f	signature:(event_t* e, user_t* user, const char* message)
event_t	include/event.h	/^} event_t;$/;"	t	typeref:struct:__anon8
events	src/event.c	/^static struct list events;$/;"	v	typeref:struct:list	file:
exit_flag	mongoose/main.c	/^static int exit_flag;$/;"	v	file:
expire	mongoose/examples/chat.c	/^  time_t expire;            \/\/ Expiration timestamp, UTC$/;"	m	struct:session	file:	access:public
ext_len	src/lib/mongoose.c	/^  size_t ext_len;$/;"	m	struct:__anon4	file:	access:public
extension	src/lib/mongoose.c	/^  const char *extension;$/;"	m	struct:__anon4	file:	access:public
f	add_files.py	/^    f = open (header_filename, 'w')$/;"	v
f	add_files.py	/^    f = open (src_filename, 'w')$/;"	v
fail	mongoose/test/exploit.pl	/^sub fail(){$/;"	s
fail	mongoose/test/test.pl	/^sub fail {$/;"	s
fail	mongoose/test/test_all_build_flags.pl	/^sub fail {$/;"	s
false	include/type.h	11;"	d
fc	src/lib/mongoose.c	/^static struct mg_connection *fc(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
fdopen	src/lib/mongoose.c	117;"	d	file:
file_name	src/lib/mongoose.c	/^  char *file_name;$/;"	m	struct:de	file:	access:public
fileno	src/lib/mongoose.c	124;"	d	file:
find_in_list	src/lib/hash.c	/^find_in_list (struct list_elem* a, struct list_elem* b, void* aux)$/;"	f	signature:(struct list_elem* a, struct list_elem* b, void* aux)
find_in_list	src/lib/hash.c	/^static int find_in_list (struct list_elem* a, struct list_elem* b, $/;"	p	file:	signature:(struct list_elem* a, struct list_elem* b, void* hash_func)
flockfile	src/lib/mongoose.c	120;"	d	file:
forward_body_data	src/lib/mongoose.c	/^static int forward_body_data(struct mg_connection *conn, FILE *fp,$/;"	f	file:	signature:(struct mg_connection *conn, FILE *fp, SOCKET sock, SSL *ssl)
free_context	src/lib/mongoose.c	/^static void free_context(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
fseeko	src/lib/mongoose.c	116;"	d	file:
func	include/lib/hash.h	/^    hash_hash_func* func;$/;"	m	struct:hash	access:public
func	mongoose/bindings/python/mongoose.py	/^            def func(event, connection, request_info):$/;"	f	function:Mongoose.__init__	access:public
func	mongoose/test/embed.c	/^  void (*func)(struct mg_connection *, const struct mg_request_info *);$/;"	m	struct:test_config	file:	access:public
function.pa	mongoose/examples/html/jquery.js	/^j.length;n<r;n++)for(k=0;k<u.length;k++){i=u[k];if(j[n].selector===i.selector){o=j[n].elem;f=null;if(i.preType==="mouseenter"||i.preType==="mouseleave")f=c(a.relatedTarget).closest(i.selector)[0];if(!f||f!==o)d.push({elem:o,handleObj:i})}}n=0;for(r=d.length;n<r;n++){j=d[n];a.currentTarget=j.elem;a.data=j.handleObj.data;a.handleObj=j.handleObj;if(j.handleObj.origHandler.apply(j.elem,e)===false){b=false;break}}return b}}function pa(a,b){return"live."+(a&&a!=="*"?a+".":"")+b.replace(\/\\.\/g,"`").replace(\/ \/g,$/;"	f
function.qa	mongoose/examples/html/jquery.js	/^"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=$/;"	f
funlockfile	src/lib/mongoose.c	121;"	d	file:
generate_session_id	mongoose/examples/chat.c	/^static void generate_session_id(char *buf, const char *random,$/;"	f	file:	signature:(char *buf, const char *random, const char *user)
get_document_root	src/lib/mongoose.c	/^static int get_document_root(const struct mg_connection *conn,$/;"	f	file:	signature:(const struct mg_connection *conn, struct vec *document_root)
get_header	mongoose/bindings/csharp/mongoose.cs	/^	public string get_header(string header_name) {$/;"	m	class:MongooseConnection	access:public	signature:(string header_name)
get_header	mongoose/bindings/python/mongoose.py	/^    def get_header(self, name):$/;"	m	class:Connection	access:public
get_header	src/lib/mongoose.c	/^static const char *get_header(const struct mg_request_info *ri,$/;"	f	file:	signature:(const struct mg_request_info *ri, const char *name)
get_mime_type	src/lib/mongoose.c	/^static void get_mime_type(struct mg_context *ctx, const char *path,$/;"	f	file:	signature:(struct mg_context *ctx, const char *path, struct vec *vec)
get_num_of_log_entries	mongoose/test/test.pl	/^sub get_num_of_log_entries {$/;"	s
get_option	mongoose/bindings/csharp/mongoose.cs	/^	public string get_option(string option_name) {$/;"	m	class:Mongoose	access:public	signature:(string option_name)
get_option	mongoose/bindings/python/mongoose.py	/^    def get_option(self, name):$/;"	m	class:Mongoose	access:public
get_option_index	src/lib/mongoose.c	/^static int get_option_index(const char *name) {$/;"	f	file:	signature:(const char *name)
get_qsvar	mongoose/examples/chat.c	/^static void get_qsvar(const struct mg_request_info *request_info,$/;"	f	file:	signature:(const struct mg_request_info *request_info, const char *name, char *dst, size_t dst_len)
get_request_len	src/lib/mongoose.c	/^static int get_request_len(const char *buf, int buflen) {$/;"	f	file:	signature:(const char *buf, int buflen)
get_session	mongoose/examples/chat.c	/^static struct session *get_session(const struct mg_connection *conn) {$/;"	f	file:	signature:(const struct mg_connection *conn)
get_var	mongoose/bindings/csharp/mongoose.cs	/^	public string get_var(string header_name) {$/;"	m	class:MongooseConnection	access:public	signature:(string header_name)
get_var	mongoose/bindings/python/mongoose.py	/^    def get_var(self, data, name):$/;"	m	class:Connection	access:public
get_var	src/protocol.c	/^get_var (const struct mg_request_info* info, const char* request_body,$/;"	f	file:	signature:(const struct mg_request_info* info, const char* request_body, const char* var, char* dst, size_t dst_len)
h	add_files.py	/^    h = open ("program_header.txt", 'r')$/;"	v
hStatus	mongoose/main.c	/^static SERVICE_STATUS_HANDLE hStatus;$/;"	v	file:
handle	src/lib/mongoose.c	/^  HANDLE   handle;$/;"	m	struct:DIR	file:	access:public
handle_cgi_request	src/lib/mongoose.c	/^static void handle_cgi_request(struct mg_connection *conn, const char *prog) {$/;"	f	file:	signature:(struct mg_connection *conn, const char *prog)
handle_directory_request	src/lib/mongoose.c	/^static void handle_directory_request(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const char *dir)
handle_file_request	src/lib/mongoose.c	/^static void handle_file_request(struct mg_connection *conn, const char *path,$/;"	f	file:	signature:(struct mg_connection *conn, const char *path, struct mgstat *stp)
handle_jsonp	mongoose/examples/chat.c	/^static int handle_jsonp(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *request_info)
handle_proxy_request	src/lib/mongoose.c	/^static void handle_proxy_request(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
handle_request	src/lib/mongoose.c	/^static void handle_request(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
handle_ssi_file_request	src/lib/mongoose.c	/^static void handle_ssi_file_request(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const char *path)
hash	include/lib/hash.h	/^struct hash$/;"	s
hash::aux	include/lib/hash.h	/^    void* aux;$/;"	m	struct:hash	access:public
hash::buckets	include/lib/hash.h	/^    struct list buckets[HASH_BUCKETS];$/;"	m	struct:hash	typeref:struct:hash::list	access:public
hash::cmp_func	include/lib/hash.h	/^    hash_compare_func* cmp_func;$/;"	m	struct:hash	access:public
hash::func	include/lib/hash.h	/^    hash_hash_func* func;$/;"	m	struct:hash	access:public
hash_addr	include/lib/hash.h	/^uint32 hash_addr (struct hash_elem* addr);$/;"	p	signature:(struct hash_elem* addr)
hash_addr	src/lib/hash.c	/^hash_addr (struct hash_elem* addr)$/;"	f	signature:(struct hash_elem* addr)
hash_compare_func	include/lib/hash.h	/^typedef int hash_compare_func (struct hash_elem* a, struct hash_elem* b,$/;"	t
hash_elem	include/lib/hash.h	/^struct hash_elem$/;"	s
hash_elem::elem	include/lib/hash.h	/^    struct list_elem elem;$/;"	m	struct:hash_elem	typeref:struct:hash_elem::list_elem	access:public
hash_find	include/lib/hash.h	/^struct hash_elem* hash_find (struct hash* hash, struct hash_elem* e, $/;"	p	signature:(struct hash* hash, struct hash_elem* e, void* aux)
hash_find	src/lib/hash.c	/^hash_find (struct hash* hash, struct hash_elem* elem, void* aux)$/;"	f	signature:(struct hash* hash, struct hash_elem* elem, void* aux)
hash_find_data	src/lib/hash.c	/^struct hash_find_data$/;"	s	file:
hash_find_data::aux	src/lib/hash.c	/^    void* aux;$/;"	m	struct:hash_find_data	file:	access:public
hash_find_data::cmp	src/lib/hash.c	/^    hash_compare_func* cmp;$/;"	m	struct:hash_find_data	file:	access:public
hash_hash_func	include/lib/hash.h	/^typedef uint32 hash_hash_func (struct hash_elem* e);$/;"	t
hash_init	include/lib/hash.h	/^void hash_init (struct hash* hash, $/;"	p	signature:(struct hash* hash, hash_hash_func* hash_func, hash_compare_func* compare_func)
hash_init	src/lib/hash.c	/^void hash_init (struct hash* hash, $/;"	f	signature:(struct hash* hash, hash_hash_func* hash_func, hash_compare_func* compare_func)
hash_insert	include/lib/hash.h	/^void hash_insert (struct hash* hash, struct hash_elem* e);$/;"	p	signature:(struct hash* hash, struct hash_elem* e)
hash_insert	src/lib/hash.c	/^hash_insert (struct hash* hash, struct hash_elem* e)$/;"	f	signature:(struct hash* hash, struct hash_elem* e)
hash_print	include/lib/hash.h	/^void hash_print (struct hash* hash, hash_print_func* func);$/;"	p	signature:(struct hash* hash, hash_print_func* func)
hash_print	src/lib/hash.c	/^hash_print (struct hash* hash, hash_print_func* func)$/;"	f	signature:(struct hash* hash, hash_print_func* func)
hash_print_func	include/lib/hash.h	/^typedef void hash_print_func (struct list_elem* e);$/;"	t
hash_remove	include/lib/hash.h	/^void hash_remove (struct hash_elem* e);$/;"	p	signature:(struct hash_elem* e)
hash_remove	src/lib/hash.c	/^hash_remove (struct hash_elem* e)$/;"	f	signature:(struct hash_elem* e)
hash_string	include/lib/hash.h	/^uint32 hash_string (struct hash_elem* str);$/;"	p	signature:(struct hash_elem* str)
hash_string	src/lib/hash.c	/^hash_string (struct hash_elem* str)$/;"	f	signature:(struct hash_elem* str)
head	include/lib/list.h	/^    struct list_elem head;$/;"	m	struct:list	typeref:struct:list::list_elem	access:public
header	add_files.py	/^    header = h.read ()$/;"	v
header	mongoose/test/exploit.pl	/^sub header()$/;"	s
header_define_str	add_files.py	/^                         "\\n\\n\\n\\n#endif  \/\/ " + header_define_str$/;"	v
header_define_str	add_files.py	/^    header_define_str = header_define_str.upper ()$/;"	v
header_define_str	add_files.py	/^    header_define_str = string.replace (header_define_str, ".", "_")$/;"	v
header_define_str	add_files.py	/^    header_define_str = string.replace (header_filename, os.sep, "_")$/;"	v
header_filename	add_files.py	/^    header_filename = "include" + os.sep + header_filename$/;"	v
header_filename	add_files.py	/^    header_filename = sys.argv[1] + ".h"$/;"	v
header_header	add_files.py	/^    header_header = string.replace (header, "${file_name}", header_filename)$/;"	v
header_header	add_files.py	/^    header_header = string.replace (header_header, "${date}", datestr)$/;"	v
header_include_str	add_files.py	/^    header_include_str = ""$/;"	v
hexdump	include/debug.h	/^void hexdump (void* start, uint32 sz);$/;"	p	signature:(void* start, uint32 sz)
hexdump	src/debug.c	/^hexdump (void* _start, uint32 sz)$/;"	f	signature:(void* _start, uint32 sz)
http_500_error	src/lib/mongoose.c	/^static const char *http_500_error = "Internal Server Error";$/;"	v	file:
http_headers	include/lib/mongoose.h	/^  } http_headers[64];    \/\/ Maximum 64 headers$/;"	m	struct:mg_request_info	typeref:struct:mg_request_info::mg_header	access:public
http_headers	mongoose/bindings/csharp/mongoose.cs	/^	[MarshalAs(UnmanagedType.ByValArray,SizeConst=64)] public MongooseHeader[] http_headers;$/;"	f	struct:MongooseRequestInfo	access:public
http_version	include/lib/mongoose.h	/^  char *http_version;    \/\/ E.g. "1.0", "1.1"$/;"	m	struct:mg_request_info	access:public
http_version	mongoose/bindings/csharp/mongoose.cs	/^	public string	http_version;$/;"	f	struct:MongooseRequestInfo	access:public
id	include/user.h	/^    char id[USER_STR_SZ + 1];$/;"	m	struct:__anon9	access:public
id	mongoose/examples/chat.c	/^  long id;                     \/\/ Message ID$/;"	m	struct:message	file:	access:public
in	src/lib/mongoose.c	/^  unsigned char in[64];$/;"	m	struct:MD5Context	file:	access:public
info	src/lib/mongoose.c	/^  WIN32_FIND_DATAW info;$/;"	m	struct:DIR	file:	access:public
init_events	include/event.h	/^int init_events (const char* message, user_t*);$/;"	p	signature:(const char* message, user_t*)
init_events	src/event.c	/^init_events (const char* message, user_t* user)$/;"	f	signature:(const char* message, user_t* user)
init_request_handler	include/request_handler.h	/^bool init_request_handler ();$/;"	p	signature:()
init_server_name	mongoose/main.c	/^static void init_server_name(void) {$/;"	f	file:	signature:(void)
init_session_handler	include/session.h	/^void init_session_handler ();$/;"	p	signature:()
init_user_index	include/user.h	/^bool init_user_index ();$/;"	p	signature:()
init_user_index	src/user.c	/^init_user_index ()$/;"	f
int64_t	src/lib/mongoose.c	/^typedef __int64   int64_t;$/;"	t	file:
is_authorized	mongoose/examples/chat.c	/^static int is_authorized(const struct mg_connection *conn,$/;"	f	file:	signature:(const struct mg_connection *conn, const struct mg_request_info *request_info)
is_authorized_for_put	src/lib/mongoose.c	/^static int is_authorized_for_put(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
is_directory	src/lib/mongoose.c	/^  int is_directory;  \/\/ Directory marker$/;"	m	struct:mgstat	file:	access:public
is_not_modified	src/lib/mongoose.c	/^static int is_not_modified(const struct mg_connection *conn,$/;"	f	file:	signature:(const struct mg_connection *conn, const struct mgstat *stp)
is_proxy	src/lib/mongoose.c	/^  int is_proxy;$/;"	m	struct:socket	file:	access:public
is_ssl	include/lib/mongoose.h	/^  int is_ssl;            \/\/ 1 if SSL-ed, 0 if not$/;"	m	struct:mg_request_info	access:public
is_ssl	src/lib/mongoose.c	/^  int is_ssl;           \/\/ Is socket SSL-ed$/;"	m	struct:socket	file:	access:public
is_valid_http_method	src/lib/mongoose.c	/^static int is_valid_http_method(const char *method) {$/;"	f	file:	signature:(const char *method)
isbyte	src/lib/mongoose.c	/^static int isbyte(int n) {$/;"	f	file:	signature:(int n)
json_parse_state_t	src/event.c	/^} json_parse_state_t;$/;"	t	typeref:struct:__anon5	file:
kill	src/lib/mongoose.c	/^static int kill(pid_t pid, int sig_num) {$/;"	f	file:	signature:(pid_t pid, int sig_num)
kill_spawned_child	mongoose/test/test.pl	/^sub kill_spawned_child {$/;"	s
last_message_id	mongoose/examples/chat.c	/^static long last_message_id;$/;"	v	file:
len	src/lib/mongoose.c	/^  int len; \/\/ Space taken$/;"	m	struct:cgi_env_block	file:	access:public
len	src/lib/mongoose.c	/^  size_t len;$/;"	m	struct:vec	file:	access:public
len	src/lib/mongoose.c	/^  socklen_t len;$/;"	m	struct:usa	file:	access:public
list	include/lib/list.h	/^struct list$/;"	s
list::head	include/lib/list.h	/^    struct list_elem head;$/;"	m	struct:list	typeref:struct:list::list_elem	access:public
list::tail	include/lib/list.h	/^    struct list_elem tail;$/;"	m	struct:list	typeref:struct:list::list_elem	access:public
list_back	include/lib/list.h	/^struct list_elem* list_back (struct list*);$/;"	p	signature:(struct list*)
list_back	src/lib/list.c	/^list_back (struct list* list)$/;"	f	signature:(struct list* list)
list_begin	include/lib/list.h	/^struct list_elem* list_begin (struct list*);$/;"	p	signature:(struct list*)
list_begin	src/lib/list.c	/^list_begin (struct list* list)$/;"	f	signature:(struct list* list)
list_compare_func	include/lib/list.h	/^    int list_compare_func (struct list_elem* a, struct list_elem* b,$/;"	t
list_elem	include/lib/list.h	/^struct list_elem$/;"	s
list_elem::next	include/lib/list.h	/^    struct list_elem* next;$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem	access:public
list_elem::prev	include/lib/list.h	/^    struct list_elem* prev;$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem	access:public
list_empty	include/lib/list.h	/^bool list_empty (struct list*);$/;"	p	signature:(struct list*)
list_empty	src/lib/list.c	/^list_empty (struct list* list)$/;"	f	signature:(struct list* list)
list_end	include/lib/list.h	/^struct list_elem* list_end (struct list*);$/;"	p	signature:(struct list*)
list_end	src/lib/list.c	/^list_end (struct list* list)$/;"	f	signature:(struct list* list)
list_find	include/lib/list.h	/^struct list_elem* list_find (struct list*, struct list_elem*,$/;"	p	signature:(struct list*, struct list_elem*, list_compare_func*, void*)
list_find	src/lib/list.c	/^list_find (struct list* list, struct list_elem* elem, $/;"	f	signature:(struct list* list, struct list_elem* elem, list_compare_func* func, void* aux)
list_front	include/lib/list.h	/^struct list_elem* list_front (struct list*);$/;"	p	signature:(struct list*)
list_front	src/lib/list.c	/^list_front (struct list* list)$/;"	f	signature:(struct list* list)
list_head	include/lib/list.h	/^struct list_elem* list_head (struct list*);$/;"	p	signature:(struct list*)
list_head	src/lib/list.c	/^list_head (struct list* list)$/;"	f	signature:(struct list* list)
list_init	include/lib/list.h	/^void list_init (struct list*);$/;"	p	signature:(struct list*)
list_init	src/lib/list.c	/^list_init (struct list* list)$/;"	f	signature:(struct list* list)
list_insert_after	include/lib/list.h	/^void list_insert_after (struct list_elem* elem, struct list_elem* data);$/;"	p	signature:(struct list_elem* elem, struct list_elem* data)
list_insert_after	src/lib/list.c	/^list_insert_after (struct list_elem* elem, struct list_elem* data)$/;"	f	signature:(struct list_elem* elem, struct list_elem* data)
list_insert_before	include/lib/list.h	/^void list_insert_before (struct list_elem* elem, struct list_elem* data);$/;"	p	signature:(struct list_elem* elem, struct list_elem* data)
list_insert_before	src/lib/list.c	/^list_insert_before (struct list_elem* elem, struct list_elem* data)$/;"	f	signature:(struct list_elem* elem, struct list_elem* data)
list_insert_ordered	include/lib/list.h	/^void list_insert_ordered (struct list*, struct list_elem*, $/;"	p	signature:(struct list*, struct list_elem*, list_compare_func*, void*)
list_insert_ordered	src/lib/list.c	/^list_insert_ordered (struct list* list, struct list_elem* elem, $/;"	f	signature:(struct list* list, struct list_elem* elem, list_compare_func* func, void* aux)
list_next	include/lib/list.h	/^struct list_elem* list_next (struct list_elem*);$/;"	p	signature:(struct list_elem*)
list_next	src/lib/list.c	/^list_next (struct list_elem* e)$/;"	f	signature:(struct list_elem* e)
list_pop_back	include/lib/list.h	/^struct list_elem* list_pop_back (struct list*);$/;"	p	signature:(struct list*)
list_pop_back	src/lib/list.c	/^list_pop_back (struct list* list)$/;"	f	signature:(struct list* list)
list_pop_front	include/lib/list.h	/^struct list_elem* list_pop_front (struct list*);$/;"	p	signature:(struct list*)
list_pop_front	src/lib/list.c	/^list_pop_front (struct list* list)$/;"	f	signature:(struct list* list)
list_prev	include/lib/list.h	/^struct list_elem* list_prev (struct list_elem*);$/;"	p	signature:(struct list_elem*)
list_prev	src/lib/list.c	/^list_prev (struct list_elem* e)$/;"	f	signature:(struct list_elem* e)
list_print	include/lib/list.h	/^void list_print (struct list*, list_print_func* func);$/;"	p	signature:(struct list*, list_print_func* func)
list_print	src/lib/list.c	/^list_print (struct list* list, list_print_func* func)$/;"	f	signature:(struct list* list, list_print_func* func)
list_print_func	include/lib/list.h	/^typedef void list_print_func (struct list_elem* e);$/;"	t
list_push_back	include/lib/list.h	/^void list_push_back (struct list*, struct list_elem*);$/;"	p	signature:(struct list*, struct list_elem*)
list_push_back	src/lib/list.c	/^list_push_back (struct list* list, struct list_elem* e)$/;"	f	signature:(struct list* list, struct list_elem* e)
list_push_front	include/lib/list.h	/^void list_push_front (struct list*, struct list_elem*);$/;"	p	signature:(struct list*, struct list_elem*)
list_push_front	src/lib/list.c	/^list_push_front (struct list* list, struct list_elem* e)$/;"	f	signature:(struct list* list, struct list_elem* e)
list_remove	include/lib/list.h	/^void list_remove (struct list_elem*);$/;"	p	signature:(struct list_elem*)
list_remove	src/lib/list.c	/^list_remove (struct list_elem* elem)$/;"	f	signature:(struct list_elem* elem)
list_tail	include/lib/list.h	/^struct list_elem* list_tail (struct list*);$/;"	p	signature:(struct list*)
list_tail	src/lib/list.c	/^list_tail (struct list* list)$/;"	f	signature:(struct list* list)
listening_ports	mongoose/bindings/python/example.py	/^                           listening_ports='8080')$/;"	v
listening_sockets	src/lib/mongoose.c	/^  struct socket *listening_sockets;$/;"	m	struct:mg_context	typeref:struct:mg_context::socket	file:	access:public
load_dll	src/lib/mongoose.c	/^static int load_dll(struct mg_context *ctx, const char *dll_name,$/;"	f	file:	signature:(struct mg_context *ctx, const char *dll_name, struct ssl_func *sw)
localtime	src/lib/mongoose.c	/^static struct tm *localtime(const time_t *ptime, struct tm *ptm) {$/;"	f	file:	signature:(const time_t *ptime, struct tm *ptm)
log_access	src/lib/mongoose.c	/^static void log_access(const struct mg_connection *conn) {$/;"	f	file:	signature:(const struct mg_connection *conn)
log_header	src/lib/mongoose.c	/^static void log_header(const struct mg_connection *conn, const char *header,$/;"	f	file:	signature:(const struct mg_connection *conn, const char *header, FILE *fp)
log_message	include/lib/mongoose.h	/^  char *log_message;     \/\/ Mongoose error log message$/;"	m	struct:mg_request_info	access:public
login_url	mongoose/examples/chat.c	/^static const char *login_url = "\/login.html";$/;"	v	file:
lookup_user	include/user.h	/^user_t* lookup_user (const char* id);$/;"	p	signature:(const char* id)
lookup_user	src/user.c	/^lookup_user (const char* id)$/;"	f	signature:(const char* id)
lowercase	src/lib/mongoose.c	/^static int lowercase(const char *s) {$/;"	f	file:	signature:(const char *s)
lsa	src/lib/mongoose.c	/^  struct usa lsa;       \/\/ Local socket address$/;"	m	struct:socket	typeref:struct:socket::usa	file:	access:public
m	include/protocol.h	/^    char* m;    \/\/ message$/;"	m	struct:__anon7	access:public
main	mongoose/examples/chat.c	/^int main(void) {$/;"	f	signature:(void)
main	mongoose/main.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	mongoose/test/embed.c	/^int main(void) {$/;"	f	signature:(void)
main	src/main.c	/^main (int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
manage_service	mongoose/main.c	/^static int manage_service(int action) {$/;"	f	file:	signature:(int action)
master_thread	src/lib/mongoose.c	/^static void master_thread(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
match_extension	src/lib/mongoose.c	/^static int match_extension(const char *path, const char *ext_list) {$/;"	f	file:	signature:(const char *path, const char *ext_list)
message	include/event.h	/^    const char* message;$/;"	m	struct:__anon8	access:public
message	mongoose/examples/chat.c	/^struct message {$/;"	s	file:
message::id	mongoose/examples/chat.c	/^  long id;                     \/\/ Message ID$/;"	m	struct:message	file:	access:public
message::text	mongoose/examples/chat.c	/^  char text[MAX_MESSAGE_LEN];  \/\/ Message text$/;"	m	struct:message	file:	access:public
message::timestamp	mongoose/examples/chat.c	/^  time_t timestamp;            \/\/ Message timestamp, UTC$/;"	m	struct:message	file:	access:public
message::user	mongoose/examples/chat.c	/^  char user[MAX_USER_LEN];     \/\/ User that have sent the message$/;"	m	struct:message	file:	access:public
messages	mongoose/examples/chat.c	/^static struct message messages[MAX_MESSAGES];  \/\/ Ringbuffer for messages$/;"	v	typeref:struct:message	file:
messages_to_json	mongoose/examples/chat.c	/^static char *messages_to_json(long last_id) {$/;"	f	file:	signature:(long last_id)
mg_callback_func	include/main.h	/^void* mg_callback_func (enum mg_event event, struct mg_connection* conn, $/;"	p	signature:(enum mg_event event, struct mg_connection* conn, const struct mg_request_info* info)
mg_callback_func	src/main.c	/^mg_callback_func (enum mg_event event, struct mg_connection* conn, $/;"	f	signature:(enum mg_event event, struct mg_connection* conn, const struct mg_request_info* info)
mg_callback_t	include/lib/mongoose.h	/^typedef void * (*mg_callback_t)(enum mg_event event,$/;"	t
mg_callback_t	mongoose/bindings/python/mongoose.py	/^mg_callback_t = ctypes.CFUNCTYPE(ctypes.c_void_p,$/;"	v
mg_connect	src/lib/mongoose.c	/^struct mg_connection *mg_connect(struct mg_connection *conn,$/;"	f	signature:(struct mg_connection *conn, const char *host, int port, int use_ssl)
mg_connection	src/lib/mongoose.c	/^struct mg_connection {$/;"	s	file:
mg_connection::birth_time	src/lib/mongoose.c	/^  time_t birth_time;          \/\/ Time connection was accepted$/;"	m	struct:mg_connection	file:	access:public
mg_connection::buf	src/lib/mongoose.c	/^  char *buf;                  \/\/ Buffer for received data$/;"	m	struct:mg_connection	file:	access:public
mg_connection::buf_size	src/lib/mongoose.c	/^  int buf_size;               \/\/ Buffer size$/;"	m	struct:mg_connection	file:	access:public
mg_connection::client	src/lib/mongoose.c	/^  struct socket client;       \/\/ Connected client$/;"	m	struct:mg_connection	typeref:struct:mg_connection::socket	file:	access:public
mg_connection::consumed_content	src/lib/mongoose.c	/^  int64_t consumed_content;   \/\/ How many bytes of content is already read$/;"	m	struct:mg_connection	file:	access:public
mg_connection::content_len	src/lib/mongoose.c	/^  int64_t content_len;        \/\/ Content-Length header value$/;"	m	struct:mg_connection	file:	access:public
mg_connection::ctx	src/lib/mongoose.c	/^  struct mg_context *ctx;$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_context	file:	access:public
mg_connection::data_len	src/lib/mongoose.c	/^  int data_len;               \/\/ Total size of data in a buffer$/;"	m	struct:mg_connection	file:	access:public
mg_connection::num_bytes_sent	src/lib/mongoose.c	/^  int64_t num_bytes_sent;     \/\/ Total bytes sent to client$/;"	m	struct:mg_connection	file:	access:public
mg_connection::peer	src/lib/mongoose.c	/^  struct mg_connection *peer; \/\/ Remote target in proxy mode$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_connection	file:	access:public
mg_connection::request_info	src/lib/mongoose.c	/^  struct mg_request_info request_info;$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_request_info	file:	access:public
mg_connection::request_len	src/lib/mongoose.c	/^  int request_len;            \/\/ Size of the request + headers in a buffer$/;"	m	struct:mg_connection	file:	access:public
mg_connection::ssl	src/lib/mongoose.c	/^  SSL *ssl;                   \/\/ SSL descriptor$/;"	m	struct:mg_connection	file:	access:public
mg_context	src/lib/mongoose.c	/^struct mg_context {$/;"	s	file:
mg_context::cond	src/lib/mongoose.c	/^  pthread_cond_t  cond;      \/\/ Condvar for tracking workers terminations$/;"	m	struct:mg_context	file:	access:public
mg_context::config	src/lib/mongoose.c	/^  char *config[NUM_OPTIONS];    \/\/ Mongoose configuration parameters$/;"	m	struct:mg_context	file:	access:public
mg_context::listening_sockets	src/lib/mongoose.c	/^  struct socket *listening_sockets;$/;"	m	struct:mg_context	typeref:struct:mg_context::socket	file:	access:public
mg_context::mutex	src/lib/mongoose.c	/^  pthread_mutex_t mutex;     \/\/ Protects (max|num)_threads$/;"	m	struct:mg_context	file:	access:public
mg_context::num_threads	src/lib/mongoose.c	/^  int num_threads;           \/\/ Number of threads$/;"	m	struct:mg_context	file:	access:public
mg_context::queue	src/lib/mongoose.c	/^  struct socket queue[20];   \/\/ Accepted sockets$/;"	m	struct:mg_context	typeref:struct:mg_context::socket	file:	access:public
mg_context::sq_empty	src/lib/mongoose.c	/^  pthread_cond_t sq_empty;   \/\/ Signaled when socket is consumed$/;"	m	struct:mg_context	file:	access:public
mg_context::sq_full	src/lib/mongoose.c	/^  pthread_cond_t sq_full;    \/\/ Singaled when socket is produced$/;"	m	struct:mg_context	file:	access:public
mg_context::sq_head	src/lib/mongoose.c	/^  int sq_head;               \/\/ Head of the socket queue$/;"	m	struct:mg_context	file:	access:public
mg_context::sq_tail	src/lib/mongoose.c	/^  int sq_tail;               \/\/ Tail of the socket queue$/;"	m	struct:mg_context	file:	access:public
mg_context::ssl_ctx	src/lib/mongoose.c	/^  SSL_CTX *ssl_ctx;             \/\/ SSL context$/;"	m	struct:mg_context	file:	access:public
mg_context::stop_flag	src/lib/mongoose.c	/^  int stop_flag;                \/\/ Should we stop event loop$/;"	m	struct:mg_context	file:	access:public
mg_context::user_callback	src/lib/mongoose.c	/^  mg_callback_t user_callback;  \/\/ User-defined callback function$/;"	m	struct:mg_context	file:	access:public
mg_edit_passwords	mongoose/main.c	/^static int mg_edit_passwords(const char *fname, const char *domain,$/;"	f	file:	signature:(const char *fname, const char *domain, const char *user, const char *pass)
mg_event	include/lib/mongoose.h	/^enum mg_event {$/;"	g
mg_event_func_t	include/main.h	/^typedef void * (*mg_event_func_t) (struct mg_connection*, $/;"	t
mg_event_log_func	include/main.h	/^void* mg_event_log_func (struct mg_connection*,$/;"	p	signature:(struct mg_connection*, const struct mg_request_info*)
mg_event_log_func	src/main.c	/^void* mg_event_log_func (struct mg_connection* conn,$/;"	f	signature:(struct mg_connection* conn, const struct mg_request_info* info)
mg_fopen	src/lib/mongoose.c	/^static FILE *mg_fopen(const char *path, const char *mode) {$/;"	f	file:	signature:(const char *path, const char *mode)
mg_fopen	src/lib/mongoose.c	/^static FILE *mg_fopen(const char *path, const char *mode);$/;"	p	file:	signature:(const char *path, const char *mode)
mg_fopen	src/lib/mongoose.c	190;"	d	file:
mg_free	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_free(IntPtr ptr);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr ptr)
mg_get_cookie	include/lib/mongoose.h	/^int mg_get_cookie(const struct mg_connection *,$/;"	p	signature:(const struct mg_connection *, const char *cookie_name, char *buf, size_t buf_len)
mg_get_cookie	src/lib/mongoose.c	/^int mg_get_cookie(const struct mg_connection *conn, const char *cookie_name,$/;"	f	signature:(const struct mg_connection *conn, const char *cookie_name, char *dst, size_t dst_size)
mg_get_header	include/lib/mongoose.h	/^const char *mg_get_header(const struct mg_connection *, const char *name);$/;"	p	signature:(const struct mg_connection *, const char *name)
mg_get_header	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_header(IntPtr ctx, string name);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr ctx, string name)
mg_get_header	src/lib/mongoose.c	/^const char *mg_get_header(const struct mg_connection *conn, const char *name) {$/;"	f	signature:(const struct mg_connection *conn, const char *name)
mg_get_option	include/lib/mongoose.h	/^const char *mg_get_option(const struct mg_context *ctx, const char *name);$/;"	p	signature:(const struct mg_context *ctx, const char *name)
mg_get_option	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_option(IntPtr ctx, string name);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, string name)
mg_get_option	src/lib/mongoose.c	/^const char *mg_get_option(const struct mg_context *ctx, const char *name) {$/;"	f	signature:(const struct mg_context *ctx, const char *name)
mg_get_valid_option_names	include/lib/mongoose.h	/^const char **mg_get_valid_option_names(void);$/;"	p	signature:(void)
mg_get_valid_option_names	src/lib/mongoose.c	/^const char **mg_get_valid_option_names(void) {$/;"	f	signature:(void)
mg_get_var	include/lib/mongoose.h	/^int mg_get_var(const char *data, size_t data_len,$/;"	p	signature:(const char *data, size_t data_len, const char *var_name, char *buf, size_t buf_len)
mg_get_var	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_get_var(IntPtr ctx, string name);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr ctx, string name)
mg_get_var	src/lib/mongoose.c	/^int mg_get_var(const char *buf, size_t buf_len, const char *name,$/;"	f	signature:(const char *buf, size_t buf_len, const char *name, char *dst, size_t dst_len)
mg_header	include/lib/mongoose.h	/^  struct mg_header {$/;"	s	struct:mg_request_info	access:public
mg_header	mongoose/bindings/python/mongoose.py	/^class mg_header(ctypes.Structure):$/;"	c	inherits:ctypes.Structure
mg_http_error_func	include/main.h	/^void* mg_http_error_func (struct mg_connection*,$/;"	p	signature:(struct mg_connection*, const struct mg_request_info*)
mg_http_error_func	src/main.c	/^void* mg_http_error_func (struct mg_connection* conn,$/;"	f	signature:(struct mg_connection* conn, const struct mg_request_info* info)
mg_init_ssl	include/main.h	/^void* mg_init_ssl (struct mg_connection*,$/;"	p	signature:(struct mg_connection*, const struct mg_request_info*)
mg_init_ssl	src/main.c	/^void* mg_init_ssl (struct mg_connection* conn,$/;"	f	signature:(struct mg_connection* conn, const struct mg_request_info* info)
mg_md5	include/lib/mongoose.h	/^void mg_md5(char *buf, ...);$/;"	p	signature:(char *buf, ...)
mg_md5	src/lib/mongoose.c	/^void mg_md5(char *buf, ...) {$/;"	f	signature:(char *buf, ...)
mg_mkdir	src/lib/mongoose.c	/^static int mg_mkdir(const char *path, int mode) {$/;"	f	file:	signature:(const char *path, int mode)
mg_mkdir	src/lib/mongoose.c	191;"	d	file:
mg_modify_passwords_file	include/lib/mongoose.h	/^int mg_modify_passwords_file(struct mg_context *ctx, $/;"	p	signature:(struct mg_context *ctx, const char *passwords_file_name, const char *user, const char *password)
mg_modify_passwords_file	src/lib/mongoose.c	/^int mg_modify_passwords_file(struct mg_context *ctx, const char *fname,$/;"	f	signature:(struct mg_context *ctx, const char *fname, const char *user, const char *pass)
mg_new_request_func	include/main.h	/^void* mg_new_request_func (struct mg_connection*,$/;"	p	signature:(struct mg_connection*, const struct mg_request_info*)
mg_new_request_func	src/main.c	/^void* mg_new_request_func (struct mg_connection* conn,$/;"	f	signature:(struct mg_connection* conn, const struct mg_request_info* info)
mg_printf	include/lib/mongoose.h	/^int mg_printf(struct mg_connection *, const char *fmt, ...);$/;"	p	signature:(struct mg_connection *, const char *fmt, ...)
mg_printf	src/lib/mongoose.c	/^int mg_printf(struct mg_connection *conn, const char *fmt, ...) {$/;"	f	signature:(struct mg_connection *conn, const char *fmt, ...)
mg_read	include/lib/mongoose.h	/^int mg_read(struct mg_connection *, void *buf, size_t len);$/;"	p	signature:(struct mg_connection *, void *buf, size_t len)
mg_read	src/lib/mongoose.c	/^int mg_read(struct mg_connection *conn, void *buf, size_t len) {$/;"	f	signature:(struct mg_connection *conn, void *buf, size_t len)
mg_remove	src/lib/mongoose.c	/^static int mg_remove(const char *path) {$/;"	f	file:	signature:(const char *path)
mg_remove	src/lib/mongoose.c	192;"	d	file:
mg_rename	src/lib/mongoose.c	/^static int mg_rename(const char* oldname, const char* newname) {$/;"	f	file:	signature:(const char* oldname, const char* newname)
mg_rename	src/lib/mongoose.c	193;"	d	file:
mg_request_info	include/lib/mongoose.h	/^struct mg_request_info {$/;"	s
mg_request_info	mongoose/bindings/python/mongoose.py	/^class mg_request_info(ctypes.Structure):$/;"	c	inherits:ctypes.Structure
mg_request_info::http_headers	include/lib/mongoose.h	/^  } http_headers[64];    \/\/ Maximum 64 headers$/;"	m	struct:mg_request_info	typeref:struct:mg_request_info::mg_header	access:public
mg_request_info::http_version	include/lib/mongoose.h	/^  char *http_version;    \/\/ E.g. "1.0", "1.1"$/;"	m	struct:mg_request_info	access:public
mg_request_info::is_ssl	include/lib/mongoose.h	/^  int is_ssl;            \/\/ 1 if SSL-ed, 0 if not$/;"	m	struct:mg_request_info	access:public
mg_request_info::log_message	include/lib/mongoose.h	/^  char *log_message;     \/\/ Mongoose error log message$/;"	m	struct:mg_request_info	access:public
mg_request_info::mg_header	include/lib/mongoose.h	/^  struct mg_header {$/;"	s	struct:mg_request_info	access:public
mg_request_info::mg_header::name	include/lib/mongoose.h	/^    char *name;          \/\/ HTTP header name$/;"	m	struct:mg_request_info::mg_header	access:public
mg_request_info::mg_header::value	include/lib/mongoose.h	/^    char *value;         \/\/ HTTP header value$/;"	m	struct:mg_request_info::mg_header	access:public
mg_request_info::num_headers	include/lib/mongoose.h	/^  int num_headers;       \/\/ Number of headers$/;"	m	struct:mg_request_info	access:public
mg_request_info::query_string	include/lib/mongoose.h	/^  char *query_string;    \/\/ \\0 - terminated$/;"	m	struct:mg_request_info	access:public
mg_request_info::remote_ip	include/lib/mongoose.h	/^  long remote_ip;        \/\/ Client's IP address$/;"	m	struct:mg_request_info	access:public
mg_request_info::remote_port	include/lib/mongoose.h	/^  int remote_port;       \/\/ Client's port$/;"	m	struct:mg_request_info	access:public
mg_request_info::remote_user	include/lib/mongoose.h	/^  char *remote_user;     \/\/ Authenticated user$/;"	m	struct:mg_request_info	access:public
mg_request_info::request_method	include/lib/mongoose.h	/^  char *request_method;  \/\/ "GET", "POST", etc$/;"	m	struct:mg_request_info	access:public
mg_request_info::status_code	include/lib/mongoose.h	/^  int status_code;       \/\/ HTTP reply status code$/;"	m	struct:mg_request_info	access:public
mg_request_info::uri	include/lib/mongoose.h	/^  char *uri;             \/\/ URL-decoded URI$/;"	m	struct:mg_request_info	access:public
mg_set_log_callback	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_set_log_callback(IntPtr ctx, MulticastDelegate func);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, MulticastDelegate func)
mg_set_option	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern int	mg_set_option(IntPtr ctx, string name, string value);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, string name, string value)
mg_set_uri_callback	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_set_uri_callback(IntPtr ctx, string uri_regex, MulticastDelegate func, IntPtr data);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx, string uri_regex, MulticastDelegate func, IntPtr data)
mg_snprintf	src/lib/mongoose.c	/^static int mg_snprintf(struct mg_connection *conn, char *buf, size_t buflen,$/;"	f	file:	signature:(struct mg_connection *conn, char *buf, size_t buflen, const char *fmt, ...)
mg_start	include/lib/mongoose.h	/^struct mg_context *mg_start(mg_callback_t callback, const char **options);$/;"	p	signature:(mg_callback_t callback, const char **options)
mg_start	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern IntPtr	mg_start();$/;"	m	class:Mongoose	file:	access:private	signature:()
mg_start	src/lib/mongoose.c	/^struct mg_context *mg_start(mg_callback_t user_callback, const char **options) {$/;"	f	signature:(mg_callback_t user_callback, const char **options)
mg_stat	src/lib/mongoose.c	/^static int mg_stat(const char *path, struct mgstat *stp) {$/;"	f	file:	signature:(const char *path, struct mgstat *stp)
mg_stop	include/lib/mongoose.h	/^void mg_stop(struct mg_context *);$/;"	p	signature:(struct mg_context *)
mg_stop	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern void	mg_stop(IntPtr ctx);$/;"	m	class:Mongoose	file:	access:private	signature:(IntPtr ctx)
mg_stop	src/lib/mongoose.c	/^void mg_stop(struct mg_context *ctx) {$/;"	f	signature:(struct mg_context *ctx)
mg_strcasecmp	src/lib/mongoose.c	/^static int mg_strcasecmp(const char *s1, const char *s2) {$/;"	f	file:	signature:(const char *s1, const char *s2)
mg_strdup	src/lib/mongoose.c	/^static char * mg_strdup(const char *str) {$/;"	f	file:	signature:(const char *str)
mg_strlcpy	src/lib/mongoose.c	/^static void mg_strlcpy(register char *dst, register const char *src, size_t n) {$/;"	f	file:	signature:(register char *dst, register const char *src, size_t n)
mg_strncasecmp	src/lib/mongoose.c	/^static int mg_strncasecmp(const char *s1, const char *s2, size_t len) {$/;"	f	file:	signature:(const char *s1, const char *s2, size_t len)
mg_strndup	src/lib/mongoose.c	/^static char * mg_strndup(const char *ptr, size_t len) {$/;"	f	file:	signature:(const char *ptr, size_t len)
mg_thread_func_t	src/lib/mongoose.c	/^typedef void * (*mg_thread_func_t)(void *);$/;"	t	file:
mg_version	include/lib/mongoose.h	/^const char *mg_version(void);$/;"	p	signature:(void)
mg_version	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] private static extern string	mg_version();$/;"	m	class:Mongoose	file:	access:private	signature:()
mg_version	src/lib/mongoose.c	/^const char *mg_version(void) {$/;"	f	signature:(void)
mg_vsnprintf	src/lib/mongoose.c	/^static int mg_vsnprintf(struct mg_connection *conn, char *buf, size_t buflen,$/;"	f	file:	signature:(struct mg_connection *conn, char *buf, size_t buflen, const char *fmt, va_list ap)
mg_write	include/lib/mongoose.h	/^int mg_write(struct mg_connection *, const void *buf, size_t len);$/;"	p	signature:(struct mg_connection *, const void *buf, size_t len)
mg_write	mongoose/bindings/csharp/mongoose.cs	/^	[DllImport("_mongoose",CallingConvention=CallingConvention.Cdecl)] public static extern int	mg_write(IntPtr conn, string data, int length);$/;"	m	class:MongooseConnection	file:	access:private	signature:(IntPtr conn, string data, int length)
mg_write	src/lib/mongoose.c	/^int mg_write(struct mg_connection *conn, const void *buf, size_t len) {$/;"	f	signature:(struct mg_connection *conn, const void *buf, size_t len)
mgstat	src/lib/mongoose.c	/^struct mgstat {$/;"	s	file:
mgstat::is_directory	src/lib/mongoose.c	/^  int is_directory;  \/\/ Directory marker$/;"	m	struct:mgstat	file:	access:public
mgstat::mtime	src/lib/mongoose.c	/^  time_t mtime;      \/\/ Modification time$/;"	m	struct:mgstat	file:	access:public
mgstat::size	src/lib/mongoose.c	/^  int64_t size;      \/\/ File size$/;"	m	struct:mgstat	file:	access:public
mime_type	src/lib/mongoose.c	/^  const char *mime_type;$/;"	m	struct:__anon4	file:	access:public
mime_type_len	src/lib/mongoose.c	/^  size_t mime_type_len;$/;"	m	struct:__anon4	file:	access:public
mktime	src/lib/mongoose.c	/^static time_t mktime(struct tm *ptm) {$/;"	f	file:	signature:(struct tm *ptm)
mktree	make_dirs.py	/^def mktree (pBaseDir):$/;"	f	access:public
mongoose	mongoose/bindings/csharp/mongoose.cs	/^	public Mongoose	mongoose;$/;"	f	class:MongooseConnection	access:public
mongoose	mongoose/bindings/python/example.py	/^import mongoose$/;"	i
month_names	src/lib/mongoose.c	/^static const char *month_names[] = {$/;"	v	file:
month_number_to_month_name	src/lib/mongoose.c	/^static int month_number_to_month_name(const char *s) {$/;"	f	file:	signature:(const char *s)
mtime	src/lib/mongoose.c	/^  time_t mtime;      \/\/ Modification time$/;"	m	struct:mgstat	file:	access:public
mutex	src/lib/mongoose.c	/^  pthread_mutex_t mutex;     \/\/ Protects (max|num)_threads$/;"	m	struct:mg_context	file:	access:public
my_strlcpy	mongoose/examples/chat.c	/^static void my_strlcpy(char *dst, const char *src, size_t len) {$/;"	f	file:	signature:(char *dst, const char *src, size_t len)
na	mongoose/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
name	include/lib/mongoose.h	/^    char *name;          \/\/ HTTP header name$/;"	m	struct:mg_request_info::mg_header	access:public
name	include/session.h	/^      char name[33]   \/\/ Session names must be <33 characters long$/;"	m	struct:__anon6	access:public
name	mongoose/bindings/csharp/mongoose.cs	/^	public IntPtr	name;		\/\/ Using IntPtr here because if we use strings here,$/;"	f	struct:MongooseHeader	access:public
name	src/lib/mongoose.c	/^  const char *name;   \/\/ SSL function name$/;"	m	struct:ssl_func	file:	access:public
nc	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
new_message	mongoose/examples/chat.c	/^static struct message *new_message(void) {$/;"	f	file:	signature:(void)
new_session	mongoose/examples/chat.c	/^static struct session *new_session(void) {$/;"	f	file:	signature:(void)
next	include/lib/list.h	/^    struct list_elem* next;$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem	access:public
next	src/lib/mongoose.c	/^  struct socket *next;  \/\/ Linkage$/;"	m	struct:socket	typeref:struct:socket::socket	file:	access:public
next_option	src/lib/mongoose.c	/^static const char *next_option(const char *list, struct vec *val,$/;"	f	file:	signature:(const char *list, struct vec *val, struct vec *eq_val)
nonce	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
now	add_files.py	/^    now = datetime.datetime.now ()$/;"	v
num_bytes_sent	src/lib/mongoose.c	/^  int64_t num_bytes_sent;     \/\/ Total bytes sent to client$/;"	m	struct:mg_connection	file:	access:public
num_headers	include/lib/mongoose.h	/^  int num_headers;       \/\/ Number of headers$/;"	m	struct:mg_request_info	access:public
num_headers	mongoose/bindings/csharp/mongoose.cs	/^	public int	num_headers;$/;"	f	struct:MongooseRequestInfo	access:public
num_threads	src/lib/mongoose.c	/^  int num_threads;           \/\/ Number of threads$/;"	m	struct:mg_context	file:	access:public
nvars	src/lib/mongoose.c	/^  int nvars; \/\/ Number of variables$/;"	m	struct:cgi_env_block	file:	access:public
o	mongoose/test/test.pl	/^sub o {$/;"	s
oa	mongoose/examples/html/jquery.js	/^e(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,"events");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type==="click")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,"")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=$/;"	f
off_t	src/lib/mongoose.c	/^typedef long off_t;$/;"	t	file:
on_windows	mongoose/test/test.pl	/^sub on_windows { $^O =~ \/win32\/i; }$/;"	s
open_auth_file	src/lib/mongoose.c	/^static FILE *open_auth_file(struct mg_connection *conn, const char *path) {$/;"	f	file:	signature:(struct mg_connection *conn, const char *path)
opendir	src/lib/mongoose.c	/^static DIR * opendir(const char *name) {$/;"	f	file:	signature:(const char *name)
options	mongoose/examples/chat.c	/^static const char *options[] = {$/;"	v	file:
options	src/main.c	/^static const char* options[] = {$/;"	v	file:
os	add_files.py	/^import os$/;"	i
os	make_dirs.py	/^import os$/;"	i
os	mongoose/bindings/python/mongoose.py	/^import os$/;"	i
parse_auth_header	src/lib/mongoose.c	/^static int parse_auth_header(struct mg_connection *conn, char *buf,$/;"	f	file:	signature:(struct mg_connection *conn, char *buf, size_t buf_size, struct ah *ah)
parse_date_string	src/lib/mongoose.c	/^static time_t parse_date_string(const char *s) {$/;"	f	file:	signature:(const char *s)
parse_http_body	src/lib/mongoose.c	/^static void parse_http_body(char **buf, struct mg_request_info *ri) {$/;"	f	file:	signature:(char **buf, struct mg_request_info *ri)
parse_http_headers	src/lib/mongoose.c	/^static void parse_http_headers(char **buf, struct mg_request_info *ri) {$/;"	f	file:	signature:(char **buf, struct mg_request_info *ri)
parse_http_request	src/lib/mongoose.c	/^static int parse_http_request(char *buf, struct mg_request_info *ri) {$/;"	f	file:	signature:(char *buf, struct mg_request_info *ri)
parse_json_events	src/event.c	/^parse_json_events (char* message, json_parse_state_t* state)$/;"	f	file:	signature:(char* message, json_parse_state_t* state)
parse_port_string	src/lib/mongoose.c	/^static int parse_port_string(const struct vec *vec, struct socket *so) {$/;"	f	file:	signature:(const struct vec *vec, struct socket *so)
parse_range_header	src/lib/mongoose.c	/^static int parse_range_header(const char *header, int64_t *a, int64_t *b) {$/;"	f	file:	signature:(const char *header, int64_t *a, int64_t *b)
parse_url	src/lib/mongoose.c	/^static int parse_url(const char *url, char *host, int *port) {$/;"	f	file:	signature:(const char *url, char *host, int *port)
pclose	src/lib/mongoose.c	112;"	d	file:
peer	src/lib/mongoose.c	/^  struct mg_connection *peer; \/\/ Remote target in proxy mode$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_connection	file:	access:public
pid_t	src/lib/mongoose.c	130;"	d	file:
pipe	src/lib/mongoose.c	110;"	d	file:
popen	src/lib/mongoose.c	111;"	d	file:
post_data	mongoose/bindings/csharp/mongoose.cs	/^	public IntPtr	post_data;$/;"	f	struct:MongooseRequestInfo	access:public
post_data_len	mongoose/bindings/csharp/mongoose.cs	/^	public int	post_data_len;$/;"	f	struct:MongooseRequestInfo	access:public
prepare_cgi_environment	src/lib/mongoose.c	/^static void prepare_cgi_environment(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const char *prog, struct cgi_env_block *blk)
prev	include/lib/list.h	/^    struct list_elem* prev;$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem	access:public
print_dir_entry	src/lib/mongoose.c	/^static void print_dir_entry(struct de *de) {$/;"	f	file:	signature:(struct de *de)
printf	mongoose/bindings/python/mongoose.py	/^    def printf(self, fmt, *args):$/;"	m	class:Connection	access:public
process_command_line_arguments	mongoose/main.c	/^static void process_command_line_arguments(char *argv[], char **options) {$/;"	f	file:	signature:(char *argv[], char **options)
process_new_connection	src/lib/mongoose.c	/^static void process_new_connection(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
produce_socket	src/lib/mongoose.c	/^static void produce_socket(struct mg_context *ctx, const struct socket *sp) {$/;"	f	file:	signature:(struct mg_context *ctx, const struct socket *sp)
protocol_eval	include/protocol.h	/^reqtype_t protocol_eval (protocol_info_t*, const char*, $/;"	p	signature:(protocol_info_t*, const char*, const struct mg_request_info*)
protocol_eval	src/protocol.c	/^protocol_eval (protocol_info_t* pinfo, const char* request_body,$/;"	f	signature:(protocol_info_t* pinfo, const char* request_body, const struct mg_request_info* rinfo)
protocol_info_t	include/protocol.h	/^} protocol_info_t;$/;"	t	typeref:struct:__anon7
pthread_cond_broadcast	src/lib/mongoose.c	/^static int pthread_cond_broadcast(pthread_cond_t *cv) {$/;"	f	file:	signature:(pthread_cond_t *cv)
pthread_cond_destroy	src/lib/mongoose.c	/^static int pthread_cond_destroy(pthread_cond_t *cv) {$/;"	f	file:	signature:(pthread_cond_t *cv)
pthread_cond_init	src/lib/mongoose.c	/^static int pthread_cond_init(pthread_cond_t *cv, const void *unused) {$/;"	f	file:	signature:(pthread_cond_t *cv, const void *unused)
pthread_cond_signal	src/lib/mongoose.c	/^static int pthread_cond_signal(pthread_cond_t *cv) {$/;"	f	file:	signature:(pthread_cond_t *cv)
pthread_cond_t	src/lib/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	t	typeref:struct:__anon1	file:
pthread_cond_wait	src/lib/mongoose.c	/^static int pthread_cond_wait(pthread_cond_t *cv, pthread_mutex_t *mutex) {$/;"	f	file:	signature:(pthread_cond_t *cv, pthread_mutex_t *mutex)
pthread_mutex_destroy	src/lib/mongoose.c	/^static int pthread_mutex_destroy(pthread_mutex_t *mutex) {$/;"	f	file:	signature:(pthread_mutex_t *mutex)
pthread_mutex_init	src/lib/mongoose.c	/^static int pthread_mutex_init(pthread_mutex_t *mutex, void *unused) {$/;"	f	file:	signature:(pthread_mutex_t *mutex, void *unused)
pthread_mutex_lock	src/lib/mongoose.c	/^static int pthread_mutex_lock(pthread_mutex_t *);$/;"	p	file:	signature:(pthread_mutex_t *)
pthread_mutex_lock	src/lib/mongoose.c	/^static int pthread_mutex_lock(pthread_mutex_t *mutex) {$/;"	f	file:	signature:(pthread_mutex_t *mutex)
pthread_mutex_t	src/lib/mongoose.c	/^typedef HANDLE pthread_mutex_t;$/;"	t	file:
pthread_mutex_unlock	src/lib/mongoose.c	/^static int pthread_mutex_unlock(pthread_mutex_t *);$/;"	p	file:	signature:(pthread_mutex_t *)
pthread_mutex_unlock	src/lib/mongoose.c	/^static int pthread_mutex_unlock(pthread_mutex_t *mutex) {$/;"	f	file:	signature:(pthread_mutex_t *mutex)
pthread_self	src/lib/mongoose.c	/^static pthread_t pthread_self(void) {$/;"	f	file:	signature:(void)
pthread_t	src/lib/mongoose.c	/^typedef DWORD pthread_t;$/;"	t	file:
ptr	src/lib/mongoose.c	/^  const char *ptr;$/;"	m	struct:vec	file:	access:public
ptr	src/lib/mongoose.c	/^  void  (*ptr)(void); \/\/ Function pointer$/;"	m	struct:ssl_func	file:	access:public
pull	src/lib/mongoose.c	/^static int pull(FILE *fp, SOCKET sock, SSL *ssl, char *buf, int len) {$/;"	f	file:	signature:(FILE *fp, SOCKET sock, SSL *ssl, char *buf, int len)
push	src/lib/mongoose.c	/^static int64_t push(FILE *fp, SOCKET sock, SSL *ssl, const char *buf,$/;"	f	file:	signature:(FILE *fp, SOCKET sock, SSL *ssl, const char *buf, int64_t len)
put_dir	src/lib/mongoose.c	/^static int put_dir(const char *path) {$/;"	f	file:	signature:(const char *path)
put_file	src/lib/mongoose.c	/^static void put_file(struct mg_connection *conn, const char *path) {$/;"	f	file:	signature:(struct mg_connection *conn, const char *path)
qa.K	mongoose/examples/html/jquery.js	/^true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=\/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$\/,Ua=\/^.[^:#\\[\\.,]*$\/,Va=\/\\S\/,$/;"	f
qa.ra	mongoose/examples/html/jquery.js	/^"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=$/;"	f
qa.sa	mongoose/examples/html/jquery.js	/^"&")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]==="string"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=$/;"	f
qa.wa	mongoose/examples/html/jquery.js	/^true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=\/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$\/,Ua=\/^.[^:#\\[\\.,]*$\/,Va=\/\\S\/,$/;"	f
qop	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
query_string	include/lib/mongoose.h	/^  char *query_string;    \/\/ \\0 - terminated$/;"	m	struct:mg_request_info	access:public
query_string	mongoose/bindings/csharp/mongoose.cs	/^	public string	query_string;$/;"	f	struct:MongooseRequestInfo	access:public
queue	src/lib/mongoose.c	/^  struct socket queue[20];   \/\/ Accepted sockets$/;"	m	struct:mg_context	typeref:struct:mg_context::socket	file:	access:public
random	mongoose/examples/chat.c	/^  char random[20];          \/\/ Random data used for extra user validation$/;"	m	struct:session	file:	access:public
read	mongoose/bindings/python/mongoose.py	/^    def read(self, size):$/;"	m	class:Connection	access:public
read	src/lib/mongoose.c	119;"	d	file:
read_file	mongoose/test/test.pl	/^sub read_file {$/;"	s
read_request	src/lib/mongoose.c	/^static int read_request(FILE *fp, SOCKET sock, SSL *ssl, char *buf, int bufsiz,$/;"	f	file:	signature:(FILE *fp, SOCKET sock, SSL *ssl, char *buf, int bufsiz, int *nread)
readdir	src/lib/mongoose.c	/^struct dirent * readdir(DIR *dir) {$/;"	f	signature:(DIR *dir)
redirect_to_login	mongoose/examples/chat.c	/^static void redirect_to_login(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *request_info)
redirect_to_ssl	mongoose/examples/chat.c	/^static void redirect_to_ssl(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *request_info)
reg_count	include/event.h	/^    int reg_count;  \/\/ Number of registered subscribers.  When this becomes$/;"	m	struct:__anon8	access:public
reg_count_lock	include/event.h	/^    pthread_mutex_t reg_count_lock;$/;"	m	struct:__anon8	access:public
register_request	include/request_handler.h	/^void register_request (reqest_t*);$/;"	p	signature:(reqest_t*)
remote_ip	include/lib/mongoose.h	/^  long remote_ip;        \/\/ Client's IP address$/;"	m	struct:mg_request_info	access:public
remote_ip	mongoose/bindings/csharp/mongoose.cs	/^	public int	remote_ip; \/\/int to match the 32bit declaration in c$/;"	f	struct:MongooseRequestInfo	access:public
remote_port	include/lib/mongoose.h	/^  int remote_port;       \/\/ Client's port$/;"	m	struct:mg_request_info	access:public
remote_port	mongoose/bindings/csharp/mongoose.cs	/^	public int	remote_port;$/;"	f	struct:MongooseRequestInfo	access:public
remote_user	include/lib/mongoose.h	/^  char *remote_user;     \/\/ Authenticated user$/;"	m	struct:mg_request_info	access:public
remote_user	mongoose/bindings/csharp/mongoose.cs	/^	public string	remote_user;$/;"	f	struct:MongooseRequestInfo	access:public
remove_double_dots_and_double_slashes	src/lib/mongoose.c	/^static void remove_double_dots_and_double_slashes(char *s) {$/;"	f	file:	signature:(char *s)
req	mongoose/test/test.pl	/^sub req {$/;"	s
reqtype	include/protocol.h	/^    reqtype_t reqtype;$/;"	m	struct:__anon7	access:public
reqtype	include/protocol.h	/^typedef enum reqtype {$/;"	g
reqtype_t	include/protocol.h	/^} reqtype_t;$/;"	t	typeref:enum:reqtype
request	include/request_handler.h	/^typedef struct request  {$/;"	s
request_info	src/lib/mongoose.c	/^  struct mg_request_info request_info;$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_request_info	file:	access:public
request_init	include/request_handler.h	/^bool request_init (request_t*, struct mg_connection*, struct mg_request_info*);$/;"	p	signature:(request_t*, struct mg_connection*, struct mg_request_info*)
request_len	src/lib/mongoose.c	/^  int request_len;            \/\/ Size of the request + headers in a buffer$/;"	m	struct:mg_connection	file:	access:public
request_method	include/lib/mongoose.h	/^  char *request_method;  \/\/ "GET", "POST", etc$/;"	m	struct:mg_request_info	access:public
request_method	mongoose/bindings/csharp/mongoose.cs	/^	public string	request_method;$/;"	f	struct:MongooseRequestInfo	access:public
request_t	include/request_handler.h	/^} request_t;$/;"	t	typeref:struct:request
require	include/protocol.h	46;"	d
reset_per_request_attributes	src/lib/mongoose.c	/^static void reset_per_request_attributes(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
response	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
response_header	src/main.c	/^static const char* response_header = $/;"	v	file:
result	src/lib/mongoose.c	/^  struct dirent  result;$/;"	m	struct:DIR	typeref:struct:DIR::dirent	file:	access:public
rsa	src/lib/mongoose.c	/^  struct usa rsa;       \/\/ Remote socket address$/;"	m	struct:socket	typeref:struct:socket::usa	file:	access:public
rwlock	mongoose/examples/chat.c	/^static pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	file:
s	include/protocol.h	/^    char* s;    \/\/ session$/;"	m	struct:__anon7	access:public
sa	src/lib/mongoose.c	/^    struct sockaddr sa;$/;"	m	union:usa::__anon2	typeref:struct:usa::__anon2::sockaddr	file:	access:public
save_ptr	src/event.c	/^    char* save_ptr;$/;"	m	struct:__anon5	file:	access:public
sdup	mongoose/main.c	/^static char *sdup(const char *str) {$/;"	f	file:	signature:(const char *str)
send_authorization_request	src/lib/mongoose.c	/^static void send_authorization_request(struct mg_connection *conn) {$/;"	f	file:	signature:(struct mg_connection *conn)
send_file_data	src/lib/mongoose.c	/^static void send_file_data(struct mg_connection *conn, FILE *fp, int64_t len) {$/;"	f	file:	signature:(struct mg_connection *conn, FILE *fp, int64_t len)
send_http_error	src/lib/mongoose.c	/^static void send_http_error(struct mg_connection *conn, int status,$/;"	f	file:	signature:(struct mg_connection *conn, int status, const char *reason, const char *fmt, ...)
send_server_message	mongoose/examples/chat.c	/^static void send_server_message(const char *fmt, ...) {$/;"	f	file:	signature:(const char *fmt, ...)
send_ssi_file	src/lib/mongoose.c	/^static void send_ssi_file(struct mg_connection *, const char *, FILE *, int);$/;"	p	file:	signature:(struct mg_connection *, const char *, FILE *, int)
send_ssi_file	src/lib/mongoose.c	/^static void send_ssi_file(struct mg_connection *conn, const char *path,$/;"	f	file:	signature:(struct mg_connection *conn, const char *path, FILE *fp, int include_level)
sender	include/event.h	/^    user_t* sender; \/\/ Pointer to the user who broadcasted the event$/;"	m	struct:__anon8	access:public
server	mongoose/bindings/python/example.py	/^server = mongoose.Mongoose(EventHandler,$/;"	v
server_name	mongoose/main.c	/^static char server_name[40];        \/\/ Set by init_server_name()$/;"	v	file:
service_magic_argument	mongoose/main.c	/^static const char *service_magic_argument = "--";$/;"	v	file:
session	mongoose/examples/chat.c	/^struct session {$/;"	s	file:
session::expire	mongoose/examples/chat.c	/^  time_t expire;            \/\/ Expiration timestamp, UTC$/;"	m	struct:session	file:	access:public
session::random	mongoose/examples/chat.c	/^  char random[20];          \/\/ Random data used for extra user validation$/;"	m	struct:session	file:	access:public
session::session_id	mongoose/examples/chat.c	/^  char session_id[33];      \/\/ Session ID, must be unique$/;"	m	struct:session	file:	access:public
session::user	mongoose/examples/chat.c	/^  char user[MAX_USER_LEN];  \/\/ Authenticated user$/;"	m	struct:session	file:	access:public
session_id	mongoose/examples/chat.c	/^  char session_id[33];      \/\/ Session ID, must be unique$/;"	m	struct:session	file:	access:public
sessions	mongoose/examples/chat.c	/^static struct session sessions[MAX_SESSIONS];  \/\/ Current sessions$/;"	v	typeref:struct:session	file:
set_acl_option	src/lib/mongoose.c	/^static int set_acl_option(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
set_close_on_exec	src/lib/mongoose.c	/^static void set_close_on_exec(int fd) {$/;"	f	file:	signature:(int fd)
set_close_on_exec	src/lib/mongoose.c	1066;"	d	file:
set_gpass_option	src/lib/mongoose.c	/^static int set_gpass_option(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
set_log_callback	mongoose/bindings/csharp/mongoose.cs	/^	public void set_log_callback(MongooseCallback func) {$/;"	m	class:Mongoose	access:public	signature:(MongooseCallback func)
set_non_blocking_mode	src/lib/mongoose.c	/^static int set_non_blocking_mode(SOCKET sock) {$/;"	f	file:	signature:(SOCKET sock)
set_option	mongoose/bindings/csharp/mongoose.cs	/^	public int set_option(string option_name, string option_value) {$/;"	m	class:Mongoose	access:public	signature:(string option_name, string option_value)
set_option	mongoose/main.c	/^static void set_option(char **options, const char *name, const char *value) {$/;"	f	file:	signature:(char **options, const char *name, const char *value)
set_ports_option	src/lib/mongoose.c	/^static int set_ports_option(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
set_ssl_option	src/lib/mongoose.c	/^static int set_ssl_option(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
set_uid_option	src/lib/mongoose.c	/^static int set_uid_option(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
set_uri_callback	mongoose/bindings/csharp/mongoose.cs	/^	public void set_uri_callback(string uri_regex, MongooseCallback func) {$/;"	m	class:Mongoose	access:public	signature:(string uri_regex, MongooseCallback func)
should_keep_alive	src/lib/mongoose.c	/^static int should_keep_alive(const struct mg_connection *conn) {$/;"	f	file:	signature:(const struct mg_connection *conn)
show_error	mongoose/main.c	/^static void show_error(void) {$/;"	f	file:	signature:(void)
show_usage_and_exit	mongoose/main.c	/^static void show_usage_and_exit(void) {$/;"	f	file:	signature:(void)
signal	src/lib/mongoose.c	/^typedef struct {HANDLE signal, broadcast;} pthread_cond_t;$/;"	m	struct:__anon1	file:	access:public
signal_handler	mongoose/main.c	/^static void WINCDECL signal_handler(int sig_num) {$/;"	f	file:	signature:(int sig_num)
sin	src/lib/mongoose.c	/^    struct sockaddr_in sin;$/;"	m	union:usa::__anon2	typeref:struct:usa::__anon2::sockaddr_in	file:	access:public
sint16	include/type.h	/^typedef             short sint16;$/;"	t
sint32	include/type.h	/^typedef             int sint32;$/;"	t
sint8	include/type.h	/^typedef             char sint8;$/;"	t
size	src/lib/mongoose.c	/^  int64_t size;      \/\/ File size$/;"	m	struct:mgstat	file:	access:public
size_t	include/type.h	5;"	d
skip	src/lib/mongoose.c	/^static char *skip(char **buf, const char *delimiters) {$/;"	f	file:	signature:(char **buf, const char *delimiters)
sleep	mongoose/main.c	47;"	d	file:
sleep	src/lib/mongoose.c	108;"	d	file:
snprintf	mongoose/main.c	45;"	d	file:
snprintf	src/lib/mongoose.c	106;"	d	file:
sock	src/lib/mongoose.c	/^  SOCKET sock;          \/\/ Listening socket$/;"	m	struct:socket	file:	access:public
socket	src/lib/mongoose.c	/^struct socket {$/;"	s	file:
socket::is_proxy	src/lib/mongoose.c	/^  int is_proxy;$/;"	m	struct:socket	file:	access:public
socket::is_ssl	src/lib/mongoose.c	/^  int is_ssl;           \/\/ Is socket SSL-ed$/;"	m	struct:socket	file:	access:public
socket::lsa	src/lib/mongoose.c	/^  struct usa lsa;       \/\/ Local socket address$/;"	m	struct:socket	typeref:struct:socket::usa	file:	access:public
socket::next	src/lib/mongoose.c	/^  struct socket *next;  \/\/ Linkage$/;"	m	struct:socket	typeref:struct:socket::socket	file:	access:public
socket::rsa	src/lib/mongoose.c	/^  struct usa rsa;       \/\/ Remote socket address$/;"	m	struct:socket	typeref:struct:socket::usa	file:	access:public
socket::sock	src/lib/mongoose.c	/^  SOCKET sock;          \/\/ Listening socket$/;"	m	struct:socket	file:	access:public
socklen_t	src/lib/mongoose.c	/^typedef int socklen_t;$/;"	t	file:
spawn	mongoose/test/test.pl	/^sub spawn {$/;"	s
spawn_process	src/lib/mongoose.c	/^static pid_t spawn_process(struct mg_connection *conn, const char *prog,$/;"	f	file:	signature:(struct mg_connection *conn, const char *prog, char *envblk, char *envp[], int fd_stdin, int fd_stdout, const char *dir)
sq_empty	src/lib/mongoose.c	/^  pthread_cond_t sq_empty;   \/\/ Signaled when socket is consumed$/;"	m	struct:mg_context	file:	access:public
sq_full	src/lib/mongoose.c	/^  pthread_cond_t sq_full;    \/\/ Singaled when socket is produced$/;"	m	struct:mg_context	file:	access:public
sq_head	src/lib/mongoose.c	/^  int sq_head;               \/\/ Head of the socket queue$/;"	m	struct:mg_context	file:	access:public
sq_tail	src/lib/mongoose.c	/^  int sq_tail;               \/\/ Tail of the socket queue$/;"	m	struct:mg_context	file:	access:public
src_filename	add_files.py	/^    src_filename = "src" + os.sep + src_filename$/;"	v
src_filename	add_files.py	/^    src_filename = sys.argv[1] + ".c"$/;"	v
src_header	add_files.py	/^    src_header = string.replace (header, "${file_name}", src_filename)$/;"	v
src_header	add_files.py	/^    src_header = string.replace (src_header, "${date}", datestr)$/;"	v
src_include_str	add_files.py	/^    src_include_str = ""$/;"	v
ss	mongoose/main.c	/^static SERVICE_STATUS ss;$/;"	v	file:
ssl	src/lib/mongoose.c	/^  SSL *ssl;                   \/\/ SSL descriptor$/;"	m	struct:mg_connection	file:	access:public
ssl_ctx	src/lib/mongoose.c	/^  SSL_CTX *ssl_ctx;             \/\/ SSL context$/;"	m	struct:mg_context	file:	access:public
ssl_error	src/lib/mongoose.c	/^static const char *ssl_error(void) {$/;"	f	file:	signature:(void)
ssl_func	src/lib/mongoose.c	/^struct ssl_func {$/;"	s	file:
ssl_func::name	src/lib/mongoose.c	/^  const char *name;   \/\/ SSL function name$/;"	m	struct:ssl_func	file:	access:public
ssl_func::ptr	src/lib/mongoose.c	/^  void  (*ptr)(void); \/\/ Function pointer$/;"	m	struct:ssl_func	file:	access:public
ssl_id_callback	src/lib/mongoose.c	/^static unsigned long ssl_id_callback(void) {$/;"	f	file:	signature:(void)
ssl_locking_callback	src/lib/mongoose.c	/^static void ssl_locking_callback(int mode, int mutex_num, const char *file,$/;"	f	file:	signature:(int mode, int mutex_num, const char *file, int line)
ssl_mutexes	src/lib/mongoose.c	/^static pthread_mutex_t *ssl_mutexes;$/;"	v	file:
ssl_sw	src/lib/mongoose.c	/^static struct ssl_func ssl_sw[] = {$/;"	v	typeref:struct:ssl_func	file:
sslize	src/lib/mongoose.c	/^static int sslize(struct mg_connection *conn, int (*func)(SSL *)) {$/;"	f	file:	signature:(struct mg_connection *conn, int (*func)(SSL *))
st	src/lib/mongoose.c	/^  struct mgstat st;$/;"	m	struct:de	typeref:struct:de::mgstat	file:	access:public
standard_reply	mongoose/test/embed.c	/^static const char *standard_reply =	"HTTP\/1.1 200 OK\\r\\n"$/;"	v	file:
start_mongoose	mongoose/main.c	/^static void start_mongoose(int argc, char *argv[]) {$/;"	f	file:	signature:(int argc, char *argv[])
start_thread	src/lib/mongoose.c	/^static int start_thread(struct mg_context *ctx, mg_thread_func_t func,$/;"	f	file:	signature:(struct mg_context *ctx, mg_thread_func_t func, void *param)
status_code	include/lib/mongoose.h	/^  int status_code;       \/\/ HTTP reply status code$/;"	m	struct:mg_request_info	access:public
status_code	mongoose/bindings/csharp/mongoose.cs	/^	public int	status_code;$/;"	f	struct:MongooseRequestInfo	access:public
stop_flag	src/lib/mongoose.c	/^  int stop_flag;                \/\/ Should we stop event loop$/;"	m	struct:mg_context	file:	access:public
strerror	src/lib/mongoose.c	66;"	d	file:
strftime	src/lib/mongoose.c	/^static size_t strftime(char *dst, size_t dst_size, const char *fmt,$/;"	f	file:	signature:(char *dst, size_t dst_size, const char *fmt, const struct tm *tm)
string	add_files.py	/^import string$/;"	i
strtoll	src/lib/mongoose.c	84;"	d	file:
strtoll	src/lib/mongoose.c	88;"	d	file:
strtoull	src/lib/mongoose.c	83;"	d	file:
strtoull	src/lib/mongoose.c	87;"	d	file:
substitute_index_file	src/lib/mongoose.c	/^static int substitute_index_file(struct mg_connection *conn, char *path,$/;"	f	file:	signature:(struct mg_connection *conn, char *path, size_t path_len, struct mgstat *stp)
suggest_connection_header	src/lib/mongoose.c	/^static const char *suggest_connection_header(const struct mg_connection *conn) {$/;"	f	file:	signature:(const struct mg_connection *conn)
sys	add_files.py	/^import sys$/;"	i
sys	mongoose/bindings/python/example.py	/^import sys$/;"	i
tail	include/lib/list.h	/^    struct list_elem tail;$/;"	m	struct:list	typeref:struct:list::list_elem	access:public
test_config	mongoose/test/embed.c	/^static const struct test_config {$/;"	s	file:
test_config	mongoose/test/embed.c	/^} test_config[] = {$/;"	v	typeref:struct:test_config	file:
test_config::event	mongoose/test/embed.c	/^  enum mg_event event;$/;"	m	struct:test_config	typeref:enum:test_config::mg_event	file:	access:public
test_config::func	mongoose/test/embed.c	/^  void (*func)(struct mg_connection *, const struct mg_request_info *);$/;"	m	struct:test_config	file:	access:public
test_config::uri	mongoose/test/embed.c	/^  const char *uri;$/;"	m	struct:test_config	file:	access:public
test_error	mongoose/test/embed.c	/^static void test_error(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *ri)
test_get_header	mongoose/test/embed.c	/^static void test_get_header(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *ri)
test_get_request_info	mongoose/test/embed.c	/^static void test_get_request_info(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *ri)
test_get_var	mongoose/test/embed.c	/^static void test_get_var(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *ri)
test_post	mongoose/test/embed.c	/^static void test_post(struct mg_connection *conn,$/;"	f	file:	signature:(struct mg_connection *conn, const struct mg_request_info *ri)
text	mongoose/examples/chat.c	/^  char text[MAX_MESSAGE_LEN];  \/\/ Message text$/;"	m	struct:message	file:	access:public
time	src/lib/mongoose.c	/^static time_t time(time_t *ptime) {$/;"	f	file:	signature:(time_t *ptime)
timespec	src/lib/mongoose.c	/^struct timespec {$/;"	s	file:
timespec::tv_nsec	src/lib/mongoose.c	/^  long tv_nsec;$/;"	m	struct:timespec	file:	access:public
timespec::tv_sec	src/lib/mongoose.c	/^  long tv_sec;$/;"	m	struct:timespec	file:	access:public
timestamp	mongoose/examples/chat.c	/^  time_t timestamp;            \/\/ Message timestamp, UTC$/;"	m	struct:message	file:	access:public
to_unicode	src/lib/mongoose.c	/^static void to_unicode(const char *path, wchar_t *wbuf, size_t wbuf_len) {$/;"	f	file:	signature:(const char *path, wchar_t *wbuf, size_t wbuf_len)
true	include/type.h	10;"	d
tv_nsec	src/lib/mongoose.c	/^  long tv_nsec;$/;"	m	struct:timespec	file:	access:public
tv_sec	src/lib/mongoose.c	/^  long tv_sec;$/;"	m	struct:timespec	file:	access:public
u	include/protocol.h	/^    char* u;    \/\/ user$/;"	m	struct:__anon7	access:public
u	src/lib/mongoose.c	/^  } u;$/;"	m	struct:usa	typeref:union:usa::__anon2	file:	access:public
uint16	include/type.h	/^typedef unsigned    short uint16;$/;"	t
uint16_t	src/lib/mongoose.c	/^typedef unsigned short  uint16_t;$/;"	t	file:
uint32	include/type.h	/^typedef unsigned    int uint32;$/;"	t
uint32_t	src/lib/mongoose.c	/^typedef unsigned int  uint32_t;$/;"	t	file:
uint64_t	src/lib/mongoose.c	/^typedef unsigned __int64 uint64_t;$/;"	t	file:
uint8	include/type.h	/^typedef unsigned    char uint8;$/;"	t
uri	include/lib/mongoose.h	/^  char *uri;             \/\/ URL-decoded URI$/;"	m	struct:mg_request_info	access:public
uri	mongoose/bindings/csharp/mongoose.cs	/^	public string	uri;$/;"	f	struct:MongooseRequestInfo	access:public
uri	mongoose/test/embed.c	/^  const char *uri;$/;"	m	struct:test_config	file:	access:public
uri	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
url_decode	src/lib/mongoose.c	/^static size_t url_decode(const char *src, size_t src_len, char *dst,$/;"	f	file:	signature:(const char *src, size_t src_len, char *dst, size_t dst_len, int is_form_url_encoded)
url_encode	src/lib/mongoose.c	/^static void url_encode(const char *src, char *dst, size_t dst_len) {$/;"	f	file:	signature:(const char *src, char *dst, size_t dst_len)
usa	src/lib/mongoose.c	/^struct usa {$/;"	s	file:
usa::__anon2::sa	src/lib/mongoose.c	/^    struct sockaddr sa;$/;"	m	union:usa::__anon2	typeref:struct:usa::__anon2::sockaddr	file:	access:public
usa::__anon2::sin	src/lib/mongoose.c	/^    struct sockaddr_in sin;$/;"	m	union:usa::__anon2	typeref:struct:usa::__anon2::sockaddr_in	file:	access:public
usa::len	src/lib/mongoose.c	/^  socklen_t len;$/;"	m	struct:usa	file:	access:public
usa::u	src/lib/mongoose.c	/^  } u;$/;"	m	struct:usa	typeref:union:usa::__anon2	file:	access:public
user	mongoose/examples/chat.c	/^  char user[MAX_USER_LEN];     \/\/ User that have sent the message$/;"	m	struct:message	file:	access:public
user	mongoose/examples/chat.c	/^  char user[MAX_USER_LEN];  \/\/ Authenticated user$/;"	m	struct:session	file:	access:public
user	src/lib/mongoose.c	/^  char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;$/;"	m	struct:ah	file:	access:public
user_callback	src/lib/mongoose.c	/^  mg_callback_t user_callback;  \/\/ User-defined callback function$/;"	m	struct:mg_context	file:	access:public
user_compare	include/user.h	/^int user_compare (struct hash_elem* a, struct hash_elem* b, void*);$/;"	p	signature:(struct hash_elem* a, struct hash_elem* b, void*)
user_compare	src/user.c	/^user_compare (struct hash_elem* a, struct hash_elem* b, void* AUX)$/;"	f	signature:(struct hash_elem* a, struct hash_elem* b, void* AUX)
user_hash	include/user.h	/^uint32 user_hash (struct hash_elem* e);$/;"	p	signature:(struct hash_elem* e)
user_hash	src/user.c	/^user_hash (struct hash_elem* e)$/;"	f	signature:(struct hash_elem* e)
user_index	src/user.c	/^static struct hash user_index;$/;"	v	typeref:struct:hash	file:
user_index_lock	src/user.c	/^static pthread_mutex_t user_index_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
user_init	include/user.h	/^bool user_init (user_t*, const char* id);$/;"	p	signature:(user_t*, const char* id)
user_init	src/user.c	/^user_init (user_t* u, const char* id)$/;"	f	signature:(user_t* u, const char* id)
user_register	include/user.h	/^bool user_register (user_t*, const char* sess);$/;"	p	signature:(user_t*, const char* sess)
user_register	src/user.c	/^user_register (user_t* u, const char* sess)$/;"	f	signature:(user_t* u, const char* sess)
user_t	include/user.h	/^} user_t;$/;"	t	typeref:struct:__anon9
value	include/lib/mongoose.h	/^    char *value;         \/\/ HTTP header value$/;"	m	struct:mg_request_info::mg_header	access:public
value	mongoose/bindings/csharp/mongoose.cs	/^	public IntPtr	value;		\/\/ it won't be properly marshalled.$/;"	f	struct:MongooseHeader	access:public
vars	src/lib/mongoose.c	/^  char *vars[MAX_CGI_ENVIR_VARS]; \/\/ char **envp$/;"	m	struct:cgi_env_block	file:	access:public
vec	src/lib/mongoose.c	/^struct vec {$/;"	s	file:
vec::len	src/lib/mongoose.c	/^  size_t len;$/;"	m	struct:vec	file:	access:public
vec::ptr	src/lib/mongoose.c	/^  const char *ptr;$/;"	m	struct:vec	file:	access:public
verify_document_root	mongoose/main.c	/^static void verify_document_root(const char *root) {$/;"	f	file:	signature:(const char *root)
version	mongoose/bindings/csharp/mongoose.cs	/^	public string version;$/;"	f	class:Mongoose	access:public
vsnprintf	mongoose/main.c	46;"	d	file:
vsnprintf	src/lib/mongoose.c	107;"	d	file:
wa.c	mongoose/examples/html/jquery.js	/^true;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=\/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$\/,Ua=\/^.[^:#\\[\\.,]*$\/,Va=\/\\S\/,$/;"	f
worker_thread	src/lib/mongoose.c	/^static void worker_thread(struct mg_context *ctx) {$/;"	f	file:	signature:(struct mg_context *ctx)
write	mongoose/bindings/csharp/mongoose.cs	/^	public int write(string data) {$/;"	m	class:MongooseConnection	access:public	signature:(string data)
write	mongoose/bindings/python/mongoose.py	/^    def write(self, data):$/;"	m	class:Connection	access:public
write	src/lib/mongoose.c	118;"	d	file:
write_file	mongoose/test/test.pl	/^sub write_file {$/;"	s
~Mongoose	mongoose/bindings/csharp/mongoose.cs	/^	~Mongoose() {$/;"	m	class:Mongoose	file:	access:private	signature:()
